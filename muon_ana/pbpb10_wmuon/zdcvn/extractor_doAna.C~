//#define withBG
//#define withCum

void Add_Hists(TH1D *h,TH1D *h1,TH1D *h2,int type){
  double y,y1,y2;
  double dy,dy1,dy2;
  int N=h->GetNbinsX();
  for(int i=0;i<N;i++){
    y1=h1->GetBinContent(i+1);
    dy1=h1->GetBinError(i+1);
    y2=h2->GetBinContent(i+1);
    dy2=h2->GetBinError(i+1);
    if(type==1){
      y=y1+y2;
      dy=sqrt(pow(dy1,2)+pow(dy2,2));
    }
    if(type==-1){
      y=y1-y2;
      dy=sqrt(pow(dy1,2)+pow(dy2,2));
#ifndef withBG
      y=y1;
      dy=dy1;
#endif
    }
    h->SetBinContent(i+1,y);
    h->SetBinError(i+1,dy);
  }
}

void extractor_flat::DivideHists(TH1D *h,TH1D *hnum,TH1D *hden){
  int N=hnum->GetNbinsX();
  double num,den,num_e,den_e;
  for(int i=0;i<N;i++){
    num=hnum->GetBinContent(i+1);
    num_e=hnum->GetBinError(i+1);
    den=hden->GetBinContent(i+1);
    den_e=hden->GetBinError(i+1);
    double rat=0.,rat_e=0.;
    if(den!=0.) rat=num/den;
    if(num!=0 && den!=0.) rat_e=fabs(rat)*sqrt(pow(num_e/num,2)+pow(den_e/den,2));
    h->SetBinContent(i+1,rat);
    h->SetBinError(i+1,rat_e);
  }
  
}

void extractor_flat::ReadHistos_doAna() {
  //TFile *fIn_doAna=new TFile("./Output_vn_old.root","read");
  //TFile *fIn_doAna=new TFile("./Output_vn.root","read");
  //TFile *fIn_doAna=new TFile("./Output_vn_test2.root","read");
  //TFile *fIn_doAna=new TFile("./Output_vn_new.root","read");

  //TFile *fIn_doAna=new TFile("./out/out_0_1_0.root","read");
#ifdef withBG
  TFile *fIn_doAna=new TFile("./Output_vn_new2.root","read");
  TFile *ftest=new TFile("./Output_vn_nomix.root","read");
  //Read Mean pt and Mean eta hists
  for(int icent=0;icent<NCENT;icent++){
    for(int ich=0;ich<NCH+1;ich++){
      for(int iside=0;iside<NSIDE+1;iside++){
        sprintf(name, "hMean_pt_cent%d_ch%d_side%d",icent,ich,iside);
        hMean_pt[icent][ich][iside]=(TProfile*)ftest->Get(name);
        sprintf(name, "hMean_eta_cent%d_ch%d_side%d",icent,ich,iside);
        hMean_eta[icent][ich][iside]=(TProfile*)ftest->Get(name);
      }
    }
  }
#endif
  
#ifndef withBG
  TFile *fIn_doAna=new TFile("./Output_vn_nomix.root","read");
  //Read Mean pt and Mean eta hists
  for(int icent=0;icent<NCENT;icent++){
    for(int ich=0;ich<NCH+1;ich++){
      for(int iside=0;iside<NSIDE+1;iside++){
	sprintf(name, "hMean_pt_cent%d_ch%d_side%d",icent,ich,iside);
	hMean_pt[icent][ich][iside]=(TProfile*)fIn_doAna->Get(name);
	sprintf(name, "hMean_eta_cent%d_ch%d_side%d",icent,ich,iside);
	hMean_eta[icent][ich][iside]=(TProfile*)fIn_doAna->Get(name);
      }
    }
  }
#endif
  sprintf(name,"hCent");
  hCent=(TH1D*)fIn_doAna->Get(name);
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
        sprintf(name,"hV%d_FCal_fg_cent%d_side%d",ihar+1,icent,iside);
        hVn_FCal_fg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%d_FCal_bg_cent%d_side%d",ihar+1,icent,iside);
        hVn_FCal_bg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%d_Zdc_fg_cent%d_side%d",ihar+1,icent,iside);
        hVn_Zdc_fg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%d_Zdc_bg_cent%d_side%d",ihar+1,icent,iside);
        hVn_Zdc_bg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
	/*
	//Vn Sin
        sprintf(name,"hV%dS_FCal_fg_cent%d_side%d",ihar+1,icent,iside);
        hVnS_FCal_fg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%dS_FCal_bg_cent%d_side%d",ihar+1,icent,iside);
        hVnS_FCal_bg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%dS_Zdc_fg_cent%d_side%d",ihar+1,icent,iside);
        hVnS_Zdc_fg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
        sprintf(name,"hV%dS_Zdc_bg_cent%d_side%d",ihar+1,icent,iside);
        hVnS_Zdc_bg[icent][iside][ihar]  = (TProfile2D*)fIn_doAna->Get(name);
	*/
      }
    }
  }
  /*
  for (int icent=0; icent<NCENT; icent++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      sprintf(name, "hDphi_FCal_fg_cent%d_har%d", icent, ihar);
      hDphi_FCal_fg[icent][ihar] = (TH1D*)fIn_doAna->Get(name);
      sprintf(name, "hDphi_FCal_bg_cent%d_har%d", icent, ihar);
      hDphi_FCal_bg[icent][ihar] = (TH1D*)fIn_doAna->Get(name);
      sprintf(name, "hRes_flat_FCal_cent%d_har%d", icent, ihar);
      hRes_flat_FCal[icent][ihar] = (TH1D*)fIn_doAna->Get(name);

      sprintf(name, "hDphi_Zdc_fg_cent%d_har%d", icent, ihar);
      hDphi_Zdc_fg[icent][ihar] = (TH1D*)fIn_doAna->Get(name);
      sprintf(name, "hDphi_Zdc_bg_cent%d_har%d", icent, ihar);
      hDphi_Zdc_bg[icent][ihar] = (TH1D*)fIn_doAna->Get(name);
      sprintf(name, "hRes_flat_Zdc_cent%d_har%d", icent, ihar);
      hRes_flat_Zdc[icent][ihar] = (TH1D*)fIn_doAna->Get(name);
    }
  }
  */
#ifdef withCum
  //Cumulant Hists
  TFile *fIn_doAna2=new TFile("./Output_cum.root","read");
  //2PC and 4PC Correlation hists
  for(int ihar=0;ihar<NHAR2;ihar++){
    sprintf(name,"hCrn2_cent_fg_har%d",ihar);
    hCrn2_cent_fg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    sprintf(name,"hCrn4_cent_fg_har%d",ihar);
    hCrn4_cent_fg[ihar]=(TProfile*)fIn_doAna2->Get(name);

    sprintf(name,"hCrn2_sub_cent_fg_har%d",ihar);
    hCrn2_sub_cent_fg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    sprintf(name,"hCrn4_sub_cent_fg_har%d",ihar);
    hCrn4_sub_cent_fg[ihar]=(TProfile*)fIn_doAna2->Get(name);

    sprintf(name,"hCrn2_cent_bg_har%d",ihar);
    hCrn2_cent_bg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    sprintf(name,"hCrn4_cent_bg_har%d",ihar);
    hCrn4_cent_bg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    
    sprintf(name,"hCrn2_sub_cent_bg_har%d",ihar);
    hCrn2_sub_cent_bg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    sprintf(name,"hCrn4_sub_cent_bg_har%d",ihar);
    hCrn4_sub_cent_bg[ihar]=(TProfile*)fIn_doAna2->Get(name);
    
    for(int icent=0;icent<NCENT;icent++){
      sprintf(name,"hCrn2_pt_fg_cent%d_har%d",icent,ihar);
      hCrn2_pt_fg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);
      sprintf(name,"hCrn4_pt_fg_cent%d_har%d",icent,ihar);
      hCrn4_pt_fg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);

      sprintf(name,"hCrn2_sub_pt_fg_cent%d_har%d",icent,ihar);
      hCrn2_sub_pt_fg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);
      sprintf(name,"hCrn4_sub_pt_fg_cent%d_har%d",icent,ihar);
      hCrn4_sub_pt_fg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);

      sprintf(name,"hCrn2_pt_bg_cent%d_har%d",icent,ihar);
      hCrn2_pt_bg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);
      sprintf(name,"hCrn4_pt_bg_cent%d_har%d",icent,ihar);
      hCrn4_pt_bg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);

      sprintf(name,"hCrn2_sub_pt_bg_cent%d_har%d",icent,ihar);
      hCrn2_sub_pt_bg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);
      sprintf(name,"hCrn4_sub_pt_bg_cent%d_har%d",icent,ihar);
      hCrn4_sub_pt_bg[icent][ihar]=(TProfile*)fIn_doAna2->Get(name);
    }
  }
#endif
  //Res Hists
  TFile *fIn_doAna3=new TFile("./Output_res.root","read");
  /*
  for (int ihar=0; ihar<NHAR; ihar++) {
      sprintf(name,"hResCent_FCal_fg_har%d",ihar);
      hResCent_FCal_fg[ihar] = (TProfile*)fIn_doAna3->Get(name);
      sprintf(name,"hResCent_FCal_bg_har%d",ihar);
      hResCent_FCal_bg[ihar] = (TProfile*)fIn_doAna3->Get(name);

      sprintf(name,"hResCent_Zdc_fg_har%d",ihar);
      hResCent_Zdc_fg[ihar] = (TProfile*)fIn_doAna3->Get(name);
      sprintf(name,"hResCent_Zdc_bg_har%d",ihar);
      hResCent_Zdc_bg[ihar] = (TProfile*)fIn_doAna3->Get(name);
  }
  */
  for (int icent=0; icent<NCENT; icent++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      sprintf(name, "hDphi_FCal_fg_cent%d_har%d", icent, ihar);
      hDphi_FCal_fg[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);
      sprintf(name, "hDphi_FCal_bg_cent%d_har%d", icent, ihar);
      hDphi_FCal_bg[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);
      sprintf(name, "hRes_flat_FCal_cent%d_har%d", icent, ihar);
      hRes_flat_FCal[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);

      sprintf(name, "hDphi_Zdc_fg_cent%d_har%d", icent, ihar);
      hDphi_Zdc_fg[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);
      sprintf(name, "hDphi_Zdc_bg_cent%d_har%d", icent, ihar);
      hDphi_Zdc_bg[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);
      sprintf(name, "hRes_flat_Zdc_cent%d_har%d", icent, ihar);
      hRes_flat_Zdc[icent][ihar] = (TH1D*)fIn_doAna3->Get(name);
    }
  }
  
  cout<<"Finished reaading histograms"<<endl;  
}


void extractor_flat::Run_doAna() {
  //Make hists for 5 to 80 % for comp to ALICE
  for (int ihar=0; ihar<NHAR; ihar++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      sprintf(name,"hV%d_Zdc_allCent_fg_side%d",ihar+1,iside);
      hVn_Zdc_allCent_fg[iside][ihar]  = (TProfile2D*)hVn_Zdc_fg[1][iside][ihar]->Clone(name);
      sprintf(name,"hV%d_Zdc_allCent_bg_side%d",ihar+1,iside);
      hVn_Zdc_allCent_bg[iside][ihar]  = (TProfile2D*)hVn_Zdc_bg[1][iside][ihar]->Clone(name);
      for(int icent=2; icent<NCENT; icent++){
	hVn_Zdc_allCent_fg[iside][ihar]->Add(hVn_Zdc_fg[icent][iside][ihar],1);
	hVn_Zdc_allCent_bg[iside][ihar]->Add(hVn_Zdc_bg[icent][iside][ihar],1);
      }
    }
    sprintf(name, "hDphi_Zdc_allCent_fg_har%d", ihar);
    hDphi_Zdc_allCent_fg[ihar] = (TH1D*)hDphi_Zdc_fg[1][ihar]->Clone(name);
    sprintf(name, "hDphi_Zdc_allCent_bg_har%d", ihar);
    hDphi_Zdc_allCent_bg[ihar] = (TH1D*)hDphi_Zdc_bg[1][ihar]->Clone(name);
    for(int icent=2; icent<NCENT; icent++){
      hDphi_Zdc_allCent_fg[ihar]->Add(hDphi_Zdc_fg[icent][ihar],1);
      hDphi_Zdc_allCent_bg[ihar]->Add(hDphi_Zdc_bg[icent][ihar],1);
    }
  }
  /*
  for (int ihar=0; ihar<NHAR; ihar++) {
    double y1,y2,dy1,dy2,w1,w2;
    double ysum1,dysum1,wsum1,ysum2,dysum2,wsum2;
    ysum1=0.,dysum1=0.,wsum1=0.;
    ysum2=0.,dysum2=0.,wsum2=0.;
    for(int icent=1; icent<9; icent++){
      y1=hResCent_Zdc_fg[ihar]->GetBinContent(icent+1);
      dy1=hResCent_Zdc_fg[ihar]->GetBinError(icent+1);
      w1=hResCent_Zdc_fg[ihar]->GetBinEntries(icent+1);
      ysum1+=w1*y1;
      dysum1+=pow(w1*dy1,2);
      wsum1+=w1;
      y2=hResCent_Zdc_bg[ihar]->GetBinContent(icent+1);
      dy2=hResCent_Zdc_bg[ihar]->GetBinError(icent+1);
      w2=hResCent_Zdc_bg[ihar]->GetBinEntries(icent+1);
      ysum2+=w2*y2;
      dysum2+=pow(w2*dy2,2);
      wsum2+=w2;
    }
    double yfg=ysum1/wsum1;
    double dyfg=sqrt(fabs(dysum1))/wsum1;
    double ybg=ysum2/wsum2;
    double dybg=sqrt(fabs(dysum2))/wsum2;
    hRes_Zdc_allCent_fg->SetBinContent(ihar+1,yfg);
    hRes_Zdc_allCent_fg->SetBinError(ihar+1,dyfg);
    hRes_Zdc_allCent_bg->SetBinContent(ihar+1,ybg);
    hRes_Zdc_allCent_bg->SetBinError(ihar+1,dybg);
  }
  */
  double y,y1,y2;
  double dy,dy1,dy2;
  //Resolution
  for (int ihar=0; ihar<NHAR; ihar++) {
    for (int icent=0; icent<NCENT; icent++) {
      //For FCal
      //FCal has v2,v3,v4,v5
      //hResCent_flat_FCal[ihar]->SetBinContent(icent+1, hRes_flat_FCal[icent][ihar]->GetMean());
      //hResCent_flat_FCal[ihar]->SetBinError  (icent+1, hRes_flat_FCal[icent][ihar]->GetMeanError());
      sprintf(name, "hDphi_FCal_rat_cent%d_har%d", icent, ihar);
      hDphi_FCal_rat[icent][ihar] = (TH1D*)hDphi_FCal_fg[icent][ihar]->Clone(name);
      hDphi_FCal_rat[icent][ihar]->Divide(hDphi_FCal_bg[icent][ihar]);
      double norm_sc_FCal = hDphi_FCal_bg[icent][ihar]->Integral()/(2*PI);
      hDphi_FCal_rat[icent][ihar]->Scale(norm_sc_FCal);
      
      std::vector<double> res_vec_FCal_fg = discFourrier(hDphi_FCal_fg[icent][ihar],0);
      hResCent_flat_FCal[ihar]->SetBinContent(icent+1, res_vec_FCal_fg.at(0) );
      hResCent_flat_FCal[ihar]->SetBinError  (icent+1, res_vec_FCal_fg.at(1) );

      std::vector<double> res_vec_FCal_bg = discFourrier(hDphi_FCal_bg[icent][ihar],0);
      hResCent_bg_FCal[ihar]->SetBinContent(icent+1, res_vec_FCal_bg.at(0) );
      hResCent_bg_FCal[ihar]->SetBinError  (icent+1, res_vec_FCal_bg.at(1) );
      
      /*
      y1=hResCent_flat_FCal[ihar]->GetBinContent(icent+1);
      dy1=hResCent_flat_FCal[ihar]->GetBinError(icent+1);
      y2=hResCent_bg_FCal[ihar]->GetBinContent(icent+1);
      dy2=hResCent_bg_FCal[ihar]->GetBinError(icent+1);
      y=y1-y2;
      dy=sqrt(pow(dy1,2)+pow(dy2,2));
      hResCent_flat_FCal[ihar]->SetBinContent(icent+1,y1);
      hResCent_flat_FCal[ihar]->SetBinError  (icent+1,dy1);
      hResCent_mix_FCal[ihar]->SetBinContent(icent+1,y);
      hResCent_mix_FCal[ihar]->SetBinError  (icent+1,dy);
      */
      //For Zdc
      //Zdc has v1,v2,v3,v4
      //hResCent_flat_Zdc[ihar]->SetBinContent(icent+1, hRes_flat_Zdc[icent][ihar]->GetMean());
      //hResCent_flat_Zdc[ihar]->SetBinError  (icent+1, hRes_flat_Zdc[icent][ihar]->GetMeanError());
      sprintf(name, "hDphi_Zdc_rat_cent%d_har%d", icent, ihar);
      hDphi_Zdc_rat[icent][ihar] = (TH1D*)hDphi_Zdc_fg[icent][ihar]->Clone(name);
      hDphi_Zdc_rat[icent][ihar]->Divide(hDphi_Zdc_bg[icent][ihar]);
      double norm_sc_Zdc = hDphi_Zdc_bg[icent][ihar]->Integral()/(2*PI);
      hDphi_Zdc_rat[icent][ihar]->Scale(norm_sc_Zdc);
      
      std::vector<double> res_vec_Zdc_fg = discFourrier(hDphi_Zdc_fg[icent][ihar],0);
      hResCent_flat_Zdc[ihar]->SetBinContent(icent+1, res_vec_Zdc_fg.at(0) );
      hResCent_flat_Zdc[ihar]->SetBinError  (icent+1, res_vec_Zdc_fg.at(1) );

      std::vector<double> res_vec_Zdc_bg = discFourrier(hDphi_Zdc_bg[icent][ihar],0);
      hResCent_bg_Zdc[ihar]->SetBinContent(icent+1, res_vec_Zdc_bg.at(0) );
      hResCent_bg_Zdc[ihar]->SetBinError  (icent+1, res_vec_Zdc_bg.at(1) );
      
      /*
      y1=hResCent_flat_Zdc[ihar]->GetBinContent(icent+1);
      dy1=hResCent_flat_Zdc[ihar]->GetBinError(icent+1);
      y2=hResCent_bg_Zdc[ihar]->GetBinContent(icent+1);
      dy2=hResCent_bg_Zdc[ihar]->GetBinError(icent+1);
      y=y1-y2;
      dy=sqrt(pow(dy1,2)+pow(dy2,2));
      hResCent_flat_Zdc[ihar]->SetBinContent(icent+1,y1);
      hResCent_flat_Zdc[ihar]->SetBinError  (icent+1,dy1);
      hResCent_mix_Zdc[ihar]->SetBinContent(icent+1,y);
      hResCent_mix_Zdc[ihar]->SetBinError  (icent+1,dy);
      */
    }
    //Subtract bg from fg to get signal
    Add_Hists(hResCent_mix_FCal[ihar],hResCent_flat_FCal[ihar],hResCent_bg_FCal[ihar],-1);
    Add_Hists(hResCent_mix_Zdc[ihar],hResCent_flat_Zdc[ihar],hResCent_bg_Zdc[ihar],-1);
    
    sprintf(name, "hDphi_Zdc_allCent_rat_har%d", ihar);
    hDphi_Zdc_allCent_rat[ihar] = (TH1D*)hDphi_Zdc_allCent_fg[ihar]->Clone(name);
    hDphi_Zdc_allCent_rat[ihar]->Divide(hDphi_Zdc_allCent_bg[ihar]);
    double norm_sc_Zdc = hDphi_Zdc_allCent_bg[ihar]->Integral()/(2*PI);
    hDphi_Zdc_allCent_rat[ihar]->Scale(norm_sc_Zdc);
    
    std::vector<double> res_vec_Zdc_fg = discFourrier(hDphi_Zdc_allCent_fg[0],ihar);
    hRes_flat_Zdc_allCent->SetBinContent(ihar+1, res_vec_Zdc_fg.at(0) );
    hRes_flat_Zdc_allCent->SetBinError  (ihar+1, res_vec_Zdc_fg.at(1) );

    std::vector<double> res_vec_Zdc_bg = discFourrier(hDphi_Zdc_allCent_bg[0],ihar);
    hRes_bg_Zdc_allCent->SetBinContent(ihar+1, res_vec_Zdc_bg.at(0) );
    hRes_bg_Zdc_allCent->SetBinError  (ihar+1, res_vec_Zdc_bg.at(1) );

    Add_Hists(hRes_mix_Zdc_allCent,hRes_flat_Zdc_allCent,hRes_bg_Zdc_allCent,-1);
    /*
    y1=hRes_flat_Zdc_allCent->GetBinContent(ihar+1);
    dy1=hRes_flat_Zdc_allCent->GetBinError(ihar+1);
    y2=hRes_bg_Zdc_allCent->GetBinContent(ihar+1);
    dy2=hRes_bg_Zdc_allCent->GetBinError(ihar+1);
    y=y1-y2;
    dy=sqrt(pow(dy1,2)+pow(dy2,2));
    hRes_mix_Zdc_allCent->SetBinContent(ihar+1,y);
    hRes_mix_Zdc_allCent->SetBinError(ihar+1,dy);
    */
    
  }
  //Calculate resolution Res=sqrt(<cosn(d\Psi_n)>)
  for (int ihar=0; ihar<NHAR; ihar++) {
    for (int icent=0; icent<NCENT; icent++) {
      double y1=hResCent_flat_FCal[ihar]->GetBinContent(icent+1);
      double dy1=hResCent_flat_FCal[ihar]->GetBinError(icent+1);
      double y2=sqrt(fabs(y1));
      double dy2=0.5*dy1/sqrt(fabs(y1));
      hResCent_flat_FCal_sub[ihar]->SetBinContent(icent+1,y2);
      hResCent_flat_FCal_sub[ihar]->SetBinError(icent+1,dy2);

      y1=hResCent_mix_FCal[ihar]->GetBinContent(icent+1);
      dy1=hResCent_mix_FCal[ihar]->GetBinError(icent+1);
      y2=sqrt(fabs(y1));
      dy2=0.5*dy1/sqrt(fabs(y1));
      hResCent_mix_FCal_sub[ihar]->SetBinContent(icent+1,y2);
      hResCent_mix_FCal_sub[ihar]->SetBinError(icent+1,dy2);

      y1=hResCent_flat_Zdc[ihar]->GetBinContent(icent+1);
      dy1=hResCent_flat_Zdc[ihar]->GetBinError(icent+1);
      y2=sqrt(fabs(y1));
      dy2=0.5*dy1/sqrt(fabs(y1));
      hResCent_flat_Zdc_sub[ihar]->SetBinContent(icent+1,y2);
      hResCent_flat_Zdc_sub[ihar]->SetBinError(icent+1,dy2);

      y1=hResCent_mix_Zdc[ihar]->GetBinContent(icent+1);
      dy1=hResCent_mix_Zdc[ihar]->GetBinError(icent+1);
      y2=sqrt(fabs(y1));
      dy2=0.5*dy1/sqrt(fabs(y1));
      hResCent_mix_Zdc_sub[ihar]->SetBinContent(icent+1,y2);
      hResCent_mix_Zdc_sub[ihar]->SetBinError(icent+1,dy2);
    }
  }
  //Find Resolution factor distribution
  for (int ihar=0; ihar<NHAR; ihar++) {
    doAna_ResFactor(hResCent_flat_FCal_ful[ihar],hResXCent_flat_FCal_ful[ihar],hResXCent_flat_FCal_sub[ihar],hResCent_flat_FCal_sub[ihar]);
    doAna_ResFactor(hResCent_mix_FCal_ful[ihar],hResXCent_mix_FCal_ful[ihar],hResXCent_mix_FCal_sub[ihar],hResCent_mix_FCal_sub[ihar]);
    doAna_ResFactor(hResCent_flat_Zdc_ful[ihar],hResXCent_flat_Zdc_ful[ihar],hResXCent_flat_Zdc_sub[ihar],hResCent_flat_Zdc_sub[ihar]);
    doAna_ResFactor(hResCent_mix_Zdc_ful[ihar],hResXCent_mix_Zdc_ful[ihar],hResXCent_mix_Zdc_sub[ihar],hResCent_mix_Zdc_sub[ihar]);
  }

  //doAna_FCal();
  //doAna_Zdc();
#ifdef withCum
  doAna_Cum();
#endif
}

void extractor_flat::doAna_ResFactor(TH1D *hRes_ful,TH1D *hResX_ful,TH1D *hResX_sub,TH1D *hRes) {
  TH1D *hDRes;
  double X[10000];
  double dx=10./10000.;
  hDRes=new TH1D("hDRes","",10000,0.-0.5,10000.-0.5);
  for (int icent=0; icent<NCENT; icent++) {
    double y1=hRes->GetBinContent(icent+1);
    double dy1=hRes->GetBinError(icent+1);
    hDRes->Reset();
    for(int i=0;i<10000;i++){
      X[i]=0.+i*dx;
      double Res=(X[i]*sqrt(PI)/2.) * (exp(-X[i]*X[i]/2.)) * (TMath::BesselI0(X[i]*X[i]/2.)+TMath::BesselI1(X[i]*X[i]/2.)) ;
      hDRes->SetBinContent(i+1,fabs(y1-Res));
    }
    int idres_min=hDRes->GetMinimumBin();
    double X_sub=X[idres_min];
    double X_ful=sqrt(2.)*X_sub;
    double Res_ful=(X_ful*sqrt(PI)/2.) * (exp(-X_ful*X_ful/2.)) * (TMath::BesselI0(X_ful*X_ful/2.)+TMath::BesselI1(X_ful*X_ful/2.));
    hResX_sub->SetBinContent(icent+1,X_sub);
    hResX_sub->SetBinError(icent+1,dy1);
    hResX_ful->SetBinContent(icent+1,X_ful);
    hResX_ful->SetBinError(icent+1,sqrt(2.)*dy1);
    hRes_ful->SetBinContent(icent+1,Res_ful);
    hRes_ful->SetBinError(icent+1,sqrt(2.)*dy1);
  }
  delete hDRes;
}



void extractor_flat::doAna_FCal() {
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	/*
	  double reso_2sub   = hResCent[0]->GetBinContent(icent+1);
	  double reso_2sub_e = hResCent[0]->GetBinError  (icent+1);
	  if (iside == NSIDE) {
	  reso_2sub   = sqrt(2*reso_2sub);
	  reso_2sub_e = reso_2sub_e/reso_2sub;
	  }
	*/
	//double reso_2sub=sqrt(fabs(hResCent_flat_FCal[ihar]->GetBinContent(icent+1)));
        //double reso_2sub_e=hResCent_flat_FCal[ihar]->GetBinError(icent+1)/(sqrt(2)*reso_2sub);
	/*
	double reso_2sub=sqrt(fabs(hResCent_mix_FCal[ihar]->GetBinContent(icent+1)));
	double reso_2sub_e=hResCent_mix_FCal[ihar]->GetBinError(icent+1)/(sqrt(2)*reso_2sub);
	if (iside == NSIDE) {
	  reso_2sub   = sqrt(2)*reso_2sub;
	  reso_2sub_e = sqrt(2)*reso_2sub_e;
	}
	*/
	/*
	double reso_2sub=hResCent_flat_FCal_sub[ihar]->GetBinContent(icent+1);
        double reso_2sub_e=hResCent_flat_FCal_sub[ihar]->GetBinError(icent+1);
	if (iside == NSIDE) {
	  reso_2sub   = fabs(hResCent_flat_FCal_ful[ihar]->GetBinContent(icent+1));
	  reso_2sub_e = fabs(hResCent_flat_FCal_ful[ihar]->GetBinError(icent+1));
	}
	*/
	
	double reso_2sub=hResCent_mix_FCal_sub[ihar]->GetBinContent(icent+1);
        double reso_2sub_e=hResCent_mix_FCal_sub[ihar]->GetBinError(icent+1);
	if (iside == NSIDE) {
	  reso_2sub   = fabs(hResCent_mix_FCal_ful[ihar]->GetBinContent(icent+1));
	  reso_2sub_e = fabs(hResCent_mix_FCal_ful[ihar]->GetBinError(icent+1));
	}
	
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  for (int ipt=0; ipt<NPT; ipt++) {
	    //double vn     = (hVn [icent][iside][ihar]).at(ipt).at(ieta)->GetMean();
	    //double vn_e   = (hVn [icent][iside][ihar]).at(ipt).at(ieta)->GetMeanError();
	    double vnF=hVn_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    vnF=fabs(vnF);
	    vnB=fabs(vnB);
	    if(ihar==0 && icent==0 && ieta==NETA && iside==2){
	      double err=vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2));
	      //cout<<vnF/reso_2sub<<"\t"<<err<<endl;
	    }
	    hVn_FCal_pt_raw_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnF  );
	    hVn_FCal_pt_raw_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnF_e);
	    hVn_FCal_pt_raw_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnB  );
	    hVn_FCal_pt_raw_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_FCal_pt_res_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_FCal_pt_res_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVn_FCal_pt_res_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnB/reso_2sub);
	    if(vnB!=0.) hVn_FCal_pt_res_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnSF_e=hVnS_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnSB=hVnS_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnSB_e=hVnS_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_FCal_pt_raw_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSF  );
	    hVnS_FCal_pt_raw_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSF_e);
	    hVnS_FCal_pt_res_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSF/reso_2sub);
	    hVnS_FCal_pt_res_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_FCal_pt_raw_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSB  );
	    hVnS_FCal_pt_raw_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSB_e);
	    hVnS_FCal_pt_res_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSB/reso_2sub);
	    hVnS_FCal_pt_res_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}
		
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  for (int ieta=0; ieta<NETA; ieta++) {
	    //double vn    = (hVn [icent][iside][ihar][ipt[ieta)->GetMean();
	    //double vn_e  = (hVn [icent][iside][ihar][ipt[ieta)->GetMeanError();
	    double vnF=hVn_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    vnF=fabs(vnF);
	    vnB=fabs(vnB);
	    hVn_FCal_eta_raw_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnF  );
	    hVn_FCal_eta_raw_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnF_e);
	    hVn_FCal_eta_raw_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnB  );
	    hVn_FCal_eta_raw_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_FCal_eta_res_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_FCal_eta_res_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    if(vnB!=0.) hVn_FCal_eta_res_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnB/reso_2sub);
	    hVn_FCal_eta_res_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSF_e=hVnS_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
            double vnSB=hVnS_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSB_e=hVnS_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_FCal_eta_raw_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSF  );
            hVnS_FCal_eta_raw_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSF_e);
            hVnS_FCal_eta_res_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSF/reso_2sub);
            hVnS_FCal_eta_res_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_FCal_eta_raw_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSB  );
            hVnS_FCal_eta_raw_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSB_e);
            hVnS_FCal_eta_res_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSB/reso_2sub);
            hVnS_FCal_eta_res_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}

	for (int ieta=0; ieta<NETA+4; ieta++) {
	  for (int ipt=0; ipt<NPT+1; ipt++) {
	    //if (ieta>NETA-1 && ipt == NPT) continue;
	    //double vn   = (hVn[icent][iside][ihar][ipt[ieta)->GetMean();
	    //double vn_e = (hVn[icent][iside][ihar][ipt[ieta)->GetMeanError();
	    double vnF=hVn_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    vnF=fabs(vnF);
	    vnB=fabs(vnB);
	    hVn_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnF);      
	    hVn_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnF_e);      
	    hVn_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnB);
            hVn_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_FCal_cent_res_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_FCal_cent_res_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVn_FCal_cent_res_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnB/reso_2sub);
	    if(vnB!=0.) hVn_FCal_cent_res_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_FCal_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSF_e=hVnS_FCal_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
            double vnSB=hVnS_FCal_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSB_e=hVnS_FCal_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSF);
            hVnS_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSF_e);
            hVnS_FCal_cent_res_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSF/reso_2sub);
	    hVnS_FCal_cent_res_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSB);
	    hVnS_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSB_e);
            hVnS_FCal_cent_res_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSB/reso_2sub);
            hVnS_FCal_cent_res_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}

      }
    }
  }

  //Calculate signal - vn(FG)-vn(BG)
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	//1.vn(pT)
	for (int ieta=0; ieta<NETA+4; ieta++){
	  Add_Hists(hVn_FCal_pt_raw[icent][iside][ihar][ieta],hVn_FCal_pt_raw_fg[icent][iside][ihar][ieta],hVn_FCal_pt_raw_bg[icent][iside][ihar][ieta],-1);
	  Add_Hists(hVn_FCal_pt_res[icent][iside][ihar][ieta],hVn_FCal_pt_res_fg[icent][iside][ihar][ieta],hVn_FCal_pt_res_bg[icent][iside][ihar][ieta],-1);
	  /*
	  Add_Hists(hVnS_FCal_pt_raw[icent][iside][ihar][ieta],hVnS_FCal_pt_raw_fg[icent][iside][ihar][ieta],hVnS_FCal_pt_raw_bg[icent][iside][ihar][ieta],-1);
	  Add_Hists(hVnS_FCal_pt_res[icent][iside][ihar][ieta],hVnS_FCal_pt_res_fg[icent][iside][ihar][ieta],hVnS_FCal_pt_res_bg[icent][iside][ihar][ieta],-1);
	  */
	}
	//2.vn(eta)
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  Add_Hists(hVn_FCal_eta_raw[icent][iside][ihar][ipt],hVn_FCal_eta_raw_fg[icent][iside][ihar][ipt],hVn_FCal_eta_raw_bg[icent][iside][ihar][ipt],-1);
	  Add_Hists(hVn_FCal_eta_res[icent][iside][ihar][ipt],hVn_FCal_eta_res_fg[icent][iside][ihar][ipt],hVn_FCal_eta_res_bg[icent][iside][ihar][ipt],-1);
	  /*
	  Add_Hists(hVnS_FCal_eta_raw[icent][iside][ihar][ipt],hVnS_FCal_eta_raw_fg[icent][iside][ihar][ipt],hVnS_FCal_eta_raw_bg[icent][iside][ihar][ipt],-1);
	  Add_Hists(hVnS_FCal_eta_res[icent][iside][ihar][ipt],hVnS_FCal_eta_res_fg[icent][iside][ihar][ipt],hVnS_FCal_eta_res_bg[icent][iside][ihar][ipt],-1);
	  */
	}
	//3.vn(cent)
	for (int ieta=0; ieta<NETA+4; ieta++) {
          for (int ipt=0; ipt<NPT+1; ipt++) {
            //if (ieta>NETA-1 && ipt == NPT) continue;
	    Add_Hists(hVn_FCal_cent_raw[iside][ihar][ipt][ieta],hVn_FCal_cent_raw_fg[iside][ihar][ipt][ieta],hVn_FCal_cent_raw_bg[iside][ihar][ipt][ieta],-1);
	    Add_Hists(hVn_FCal_cent_res[iside][ihar][ipt][ieta],hVn_FCal_cent_res_fg[iside][ihar][ipt][ieta],hVn_FCal_cent_res_bg[iside][ihar][ipt][ieta],-1);
	    /*
	    Add_Hists(hVnS_FCal_cent_raw[iside][ihar][ipt][ieta],hVnS_FCal_cent_raw_fg[iside][ihar][ipt][ieta],hVnS_FCal_cent_raw_bg[iside][ihar][ipt][ieta],-1);
	    Add_Hists(hVnS_FCal_cent_res[iside][ihar][ipt][ieta],hVnS_FCal_cent_res_fg[iside][ihar][ipt][ieta],hVnS_FCal_cent_res_bg[iside][ihar][ipt][ieta],-1);
	    */
	  }
	}

      }
    }
  }
  cout<<"Finished ana FCAL"<<endl;  
}  

void extractor_flat::doAna_Zdc() {
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	/*
	  double reso_2sub   = hResCent_mix[0]->GetBinContent(icent+1);
	  double reso_2sub_e = hResCent_mix[0]->GetBinError  (icent+1);
	  if (iside == NSIDE) {
	  reso_2sub   = sqrt(2*reso_2sub);
	  reso_2sub_e = reso_2sub_e/reso_2sub;
	  }
	*/
	//double reso_2sub=sqrt(fabs(hResCent_flat_Zdc[ihar]->GetBinContent(icent+1)));
	//double reso_2sub_e=hResCent_flat_Zdc[ihar]->GetBinError(icent+1)/(sqrt(2)*reso_2sub);
	/*
	double reso_2sub=sqrt(fabs(hResCent_mix_Zdc[ihar]->GetBinContent(icent+1)));
	double reso_2sub_e=hResCent_mix_Zdc[ihar]->GetBinError(icent+1)/(sqrt(2)*reso_2sub);
	if (iside == NSIDE) {
	  reso_2sub   = sqrt(2)*reso_2sub;
	  reso_2sub_e = sqrt(2)*reso_2sub_e;
	}
	*/
	/*
	double reso_2sub=hResCent_flat_Zdc_sub[ihar]->GetBinContent(icent+1);
        double reso_2sub_e=hResCent_flat_Zdc_sub[ihar]->GetBinError(icent+1);
        if (iside == NSIDE) {
          reso_2sub   = hResCent_flat_Zdc_ful[ihar]->GetBinContent(icent+1);
          reso_2sub_e =	hResCent_flat_Zdc_ful[ihar]->GetBinError(icent+1);
        }
	*/
	double reso_2sub=hResCent_mix_Zdc_sub[ihar]->GetBinContent(icent+1);
        double reso_2sub_e=hResCent_mix_Zdc_sub[ihar]->GetBinError(icent+1);
        if (iside == NSIDE) {
          reso_2sub   = hResCent_mix_Zdc_ful[ihar]->GetBinContent(icent+1);
          reso_2sub_e =	hResCent_mix_Zdc_ful[ihar]->GetBinError(icent+1);
        }
	
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  for (int ipt=0; ipt<NPT; ipt++) {
	    //double vn     = (hVn [icent][iside][ihar]).at(ipt).at(ieta)->GetMean();
	    //double vn_e   = (hVn [icent][iside][ihar]).at(ipt).at(ieta)->GetMeanError();
	    double vnF=hVn_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    if(ihar>0){vnF=fabs(vnF);vnB=fabs(vnB);}
	    hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnF  );
	    hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnF_e);
	    hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnB  );
	    hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnB/reso_2sub);
	    if(vnB!=0.) hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnSF_e=hVnS_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnSB=hVnS_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnSB_e=hVnS_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSF  );
	    hVnS_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSF_e);
	    hVnS_Zdc_pt_res_fg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSF/reso_2sub);
	    hVnS_Zdc_pt_res_fg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSB  );
	    hVnS_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSB_e);
	    hVnS_Zdc_pt_res_bg[icent][iside][ihar][ieta]->SetBinContent(ipt+1, vnSB/reso_2sub);
	    hVnS_Zdc_pt_res_bg[icent][iside][ihar][ieta]->SetBinError  (ipt+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}
		
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  for (int ieta=0; ieta<NETA; ieta++) {
	    //double vn    = (hVn [icent][iside][ihar][ipt[ieta)->GetMean();
	    //double vn_e  = (hVn [icent][iside][ihar][ipt[ieta)->GetMeanError();
	    double vnF=hVn_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    if(ihar>0){vnF=fabs(vnF);vnB=fabs(vnB);}
	    hVn_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnF  );
	    hVn_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnF_e);
	    hVn_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnB  );
	    hVn_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_Zdc_eta_res_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_Zdc_eta_res_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVn_Zdc_eta_res_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnB/reso_2sub);
	    if(vnB!=0.) hVn_Zdc_eta_res_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSF_e=hVnS_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
            double vnSB=hVnS_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSB_e=hVnS_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSF  );
            hVnS_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSF_e);
            hVnS_Zdc_eta_res_fg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSF/reso_2sub);
            hVnS_Zdc_eta_res_fg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSB  );
            hVnS_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSB_e);
            hVnS_Zdc_eta_res_bg[icent][iside][ihar][ipt]->SetBinContent(ieta+1, vnSB/reso_2sub);
            hVnS_Zdc_eta_res_bg[icent][iside][ihar][ipt]->SetBinError  (ieta+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}

	for (int ieta=0; ieta<NETA+4; ieta++) {
	  for (int ipt=0; ipt<NPT+1; ipt++) {
	    //if (ieta>NETA-1 && ipt == NPT) continue;
	    //double vn   = (hVn[icent][iside][ihar][ipt[ieta)->GetMean();
	    //double vn_e = (hVn[icent][iside][ihar][ipt[ieta)->GetMeanError();
	    double vnF=hVn_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnF_e=hVn_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    double vnB=hVn_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
	    double vnB_e=hVn_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    if(ihar>0){vnF=fabs(vnF);vnB=fabs(vnB);}
	    hVn_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnF);      
	    hVn_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnF_e);      
	    hVn_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnB);
            hVn_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnB_e);
	    if(reso_2sub==0.) continue;
	    hVn_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnF/reso_2sub);
	    if(vnF!=0.) hVn_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
            hVn_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnB/reso_2sub);
	    if(vnB!=0.)hVn_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    /*
	    double vnSF=hVnS_Zdc_fg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSF_e=hVnS_Zdc_fg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
            double vnSB=hVnS_Zdc_bg[icent][iside][ihar]->GetBinContent(ipt+1,ieta+1);
            double vnSB_e=hVnS_Zdc_bg[icent][iside][ihar]->GetBinError(ipt+1,ieta+1);
	    hVnS_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSF);
            hVnS_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSF_e);
            hVnS_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSF/reso_2sub);
	    hVnS_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSF/reso_2sub*sqrt( pow(vnSF_e/vnSF,2) + pow(reso_2sub_e/reso_2sub,2)));
	    hVnS_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSB);
	    hVnS_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSB_e);
            hVnS_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->SetBinContent(icent+1, vnSB/reso_2sub);
            hVnS_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->SetBinError  (icent+1, vnSB/reso_2sub*sqrt( pow(vnSB_e/vnSB,2) + pow(reso_2sub_e/reso_2sub,2)));
	    */
	  }
	}

      }
    }
  }

  //Calculate signal - vn(FG)-vn(BG)
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	//1.vn(pT)
	for (int ieta=0; ieta<NETA+4; ieta++){
	  Add_Hists(hVn_Zdc_pt_raw[icent][iside][ihar][ieta],hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta],hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta],-1);
	  Add_Hists(hVn_Zdc_pt_res[icent][iside][ihar][ieta],hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta],hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta],-1);
	  /*
	  Add_Hists(hVnS_Zdc_pt_raw[icent][iside][ihar][ieta],hVnS_Zdc_pt_raw_fg[icent][iside][ihar][ieta],hVnS_Zdc_pt_raw_bg[icent][iside][ihar][ieta],-1);
	  Add_Hists(hVnS_Zdc_pt_res[icent][iside][ihar][ieta],hVnS_Zdc_pt_res_fg[icent][iside][ihar][ieta],hVnS_Zdc_pt_res_bg[icent][iside][ihar][ieta],-1);
	  */
	}
	//2.vn(eta)
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  Add_Hists(hVn_Zdc_eta_raw[icent][iside][ihar][ipt],hVn_Zdc_eta_raw_fg[icent][iside][ihar][ipt],hVn_Zdc_eta_raw_bg[icent][iside][ihar][ipt],-1);
	  Add_Hists(hVn_Zdc_eta_res[icent][iside][ihar][ipt],hVn_Zdc_eta_res_fg[icent][iside][ihar][ipt],hVn_Zdc_eta_res_bg[icent][iside][ihar][ipt],-1);
	  /*
	  Add_Hists(hVnS_Zdc_eta_raw[icent][iside][ihar][ipt],hVnS_Zdc_eta_raw_fg[icent][iside][ihar][ipt],hVnS_Zdc_eta_raw_bg[icent][iside][ihar][ipt],-1);
	  Add_Hists(hVnS_Zdc_eta_res[icent][iside][ihar][ipt],hVnS_Zdc_eta_res_fg[icent][iside][ihar][ipt],hVnS_Zdc_eta_res_bg[icent][iside][ihar][ipt],-1);
	  */
	}
	//3.vn(cent)
	for (int ieta=0; ieta<NETA+4; ieta++) {
          for (int ipt=0; ipt<NPT+1; ipt++) {
            //if (ieta>NETA-1 && ipt == NPT) continue;
	    Add_Hists(hVn_Zdc_cent_raw[iside][ihar][ipt][ieta],hVn_Zdc_cent_raw_fg[iside][ihar][ipt][ieta],hVn_Zdc_cent_raw_bg[iside][ihar][ipt][ieta],-1);
	    Add_Hists(hVn_Zdc_cent_res[iside][ihar][ipt][ieta],hVn_Zdc_cent_res_fg[iside][ihar][ipt][ieta],hVn_Zdc_cent_res_bg[iside][ihar][ipt][ieta],-1);
	    /*
	    Add_Hists(hVnS_Zdc_cent_raw[iside][ihar][ipt][ieta],hVnS_Zdc_cent_raw_fg[iside][ihar][ipt][ieta],hVnS_Zdc_cent_raw_bg[iside][ihar][ipt][ieta],-1);
	    Add_Hists(hVnS_Zdc_cent_res[iside][ihar][ipt][ieta],hVnS_Zdc_cent_res_fg[iside][ihar][ipt][ieta],hVnS_Zdc_cent_res_bg[iside][ihar][ipt][ieta],-1);
	    */
	  }
	}

      }
    }
  }

  /*
  //Add vn(pT) for 5 to 80%
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ieta=0; ieta<NETA+4; ieta++) {
	double weight=hCent->GetBinContent(2);
	sprintf(name,"hV%d_Zdc_pt_raw_allCent_fg_side%d_eta%d",ihar+1,iside,ieta);
	hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_raw_fg[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->Scale(weight);
	sprintf(name,"hV%d_Zdc_pt_res_allCent_fg_side%d_eta%d",ihar+1,iside,ieta);
	hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_res_fg[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->Scale(weight);

	sprintf(name,"hV%d_Zdc_pt_raw_allCent_bg_side%d_eta%d",ihar+1,iside,ieta);
        hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_raw_bg[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->Scale(weight);
	sprintf(name,"hV%d_Zdc_pt_res_allCent_bg_side%d_eta%d",ihar+1,iside,ieta);
        hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_res_bg[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->Scale(weight);

	sprintf(name,"hV%d_Zdc_pt_raw_allCent_side%d_eta%d",ihar+1,iside,ieta);
        hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_raw[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]->Scale(weight);
	sprintf(name,"hV%d_Zdc_pt_res_allCent_side%d_eta%d",ihar+1,iside,ieta);
        hVn_Zdc_pt_res_allCent[iside][ihar][ieta]=(TH1D*)hVn_Zdc_pt_res[1][iside][ihar][ieta]->Clone(name);
	hVn_Zdc_pt_res_allCent[iside][ihar][ieta]->Scale(weight);


	int cnt=1;
	double weight_sum=weight;
	for(int icent=2;icent<9;icent++){
	  weight=hCent->GetBinContent(icent+1);
	  hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->Add(hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta],weight);
	  hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->Add(hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta],weight);
	  
	  hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->Add(hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta],weight);
	  hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->Add(hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta],weight);

	  hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]->Add(hVn_Zdc_pt_raw[icent][iside][ihar][ieta],weight);
	  hVn_Zdc_pt_res_allCent[iside][ihar][ieta]->Add(hVn_Zdc_pt_res[icent][iside][ihar][ieta],weight);

	  cnt+=1;
	  weight_sum+=weight;
	}
	hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->Scale(1./weight_sum);
	hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->Scale(1./weight_sum);
	hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->Scale(1./weight_sum);
	hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->Scale(1./weight_sum);
	hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]->Scale(1./weight_sum);
	hVn_Zdc_pt_res_allCent[iside][ihar][ieta]->Scale(1./weight_sum);
      }
    }
  }
  */
  
  //Do for vn(pT) for 5 to 80%
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      double reso_2sub=sqrt(fabs(hRes_mix_Zdc_allCent->GetBinContent(ihar+1)));
      double reso_2sub_e=hRes_mix_Zdc_allCent->GetBinError(ihar+1)/(sqrt(2)*reso_2sub);
      if (iside == NSIDE) {
	reso_2sub   = sqrt(2)*reso_2sub;
	reso_2sub_e = sqrt(2)*reso_2sub_e;
      }

      for (int ieta=0; ieta<NETA+4; ieta++) {
	for (int ipt=0; ipt<NPT; ipt++) {
	  //double vn     = (hVn [iside][ihar]).at(ipt).at(ieta)->GetMean();
	  //double vn_e   = (hVn [iside][ihar]).at(ipt).at(ieta)->GetMeanError();
	  double vnF=hVn_Zdc_allCent_fg[iside][ihar]->GetBinContent(ipt+1,ieta+1);
	  double vnF_e=hVn_Zdc_allCent_fg[iside][ihar]->GetBinError(ipt+1,ieta+1);
	  double vnB=hVn_Zdc_allCent_bg[iside][ihar]->GetBinContent(ipt+1,ieta+1);
	  double vnB_e=hVn_Zdc_allCent_bg[iside][ihar]->GetBinError(ipt+1,ieta+1);
	  if(ihar>0){vnF=fabs(vnF);vnB=fabs(vnB);}
	  hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->SetBinContent(ipt+1, vnF  );
	  hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->SetBinError  (ipt+1, vnF_e);
	  hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->SetBinContent(ipt+1, vnF/reso_2sub);
	  hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->SetBinError  (ipt+1, vnF/reso_2sub*sqrt( pow(vnF_e/vnF,2) + pow(reso_2sub_e/reso_2sub,2)));
	  hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->SetBinContent(ipt+1, vnB  );
	  hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->SetBinError  (ipt+1, vnB_e);
	  hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->SetBinContent(ipt+1, vnB/reso_2sub);
	  hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->SetBinError  (ipt+1, vnB/reso_2sub*sqrt( pow(vnB_e/vnB,2) + pow(reso_2sub_e/reso_2sub,2)));
	}
      }
    }
  }
  
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      //1.vn(pT)
      for (int ieta=0; ieta<NETA+4; ieta++){
	Add_Hists(hVn_Zdc_pt_raw_allCent[iside][ihar][ieta],hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta],hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta],-1);
	Add_Hists(hVn_Zdc_pt_res_allCent[iside][ihar][ieta],hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta],hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta],-1);
	//Add_Hists(hVnS_Zdc_pt_raw_allCent[iside][ihar][ieta],hVnS_Zdc_pt_raw_allCent_fg[iside][ihar][ieta],hVnS_Zdc_pt_raw_allCent_bg[iside][ihar][ieta],-1);
	//Add_Hists(hVnS_Zdc_pt_res_allCent[iside][ihar][ieta],hVnS_Zdc_pt_res_allCent_fg[iside][ihar][ieta],hVnS_Zdc_pt_res_allCent_bg[iside][ihar][ieta],-1);
      }
    }
  }
  
  
  cout<<"Finished ana ZDC"<<endl;  
}  

void GetCn2(TH1D *hCn,TProfile *hCrn){
  int N=hCn->GetNbinsX();
  double y1,y2,dy1,dy2;
  for(int i=0;i<N;i++){
    y1=hCrn->GetBinContent(i+1);
    dy1=hCrn->GetBinError(i+1);
    y2=y1;
    dy2=dy1;
    hCn->SetBinContent(i+1,y2);
    hCn->SetBinError(i+1,dy2);
  }
}

void GetCn4(TH1D *hCn,TProfile *hCrn4,TProfile *hCrn2){
  int N=hCn->GetNbinsX();
  double y1,y2,y,dy1,dy2,dy;
  for(int i=0;i<N;i++){
    y1=hCrn4->GetBinContent(i+1);
    dy1=hCrn4->GetBinError(i+1);
    y2=hCrn2->GetBinContent(i+1);
    dy2=hCrn2->GetBinError(i+1);
    y=y1-2.*y2*y2;
    dy=sqrt(pow(dy1,2)+pow(4.*y2*dy2,2));
    hCn->SetBinContent(i+1,y);
    hCn->SetBinError(i+1,dy);
  }
}

void GetVn2(TH1D *hVn,TH1D *hCn){
  int N=hVn->GetNbinsX();
  double y1,y2,dy1,dy2;
  for(int i=0;i<N;i++){
    y1=hCn->GetBinContent(i+1);
    dy1=hCn->GetBinError(i+1);
    y2=sqrt(fabs(y1));
    dy2=0.5*dy1/sqrt(fabs(y1));
    hVn->SetBinContent(i+1,y2);
    hVn->SetBinError(i+1,dy2);
  }
}

void GetVn4(TH1D *hVn,TH1D *hCn){
  int N=hVn->GetNbinsX();
  double y1,y2,dy1,dy2;
  for(int i=0;i<N;i++){
    y1=hCn->GetBinContent(i+1);
    dy1=hCn->GetBinError(i+1);
    y2=-pow(fabs(y1),1./4.)*y1/fabs(y1);
    dy2=(1./4.)*dy1*pow(fabs(y1),1./4.-1.);
    hVn->SetBinContent(i+1,y2);
    hVn->SetBinError(i+1,dy2);
  }
}

void extractor_flat::doAna_Cum() {
  for(int ihar=0;ihar<NHAR2;ihar++){
    GetCn2(hCn_cum2_cent[ihar],hCrn2_cent_fg[ihar]);
    GetCn4(hCn_cum4_cent[ihar],hCrn4_cent_fg[ihar],hCrn2_cent_fg[ihar]);
    GetVn2(hVn_cum2_cent[ihar],hCn_cum2_cent[ihar]);
    GetVn4(hVn_cum4_cent[ihar],hCn_cum4_cent[ihar]);

    GetCn2(hCn_sub_cum2_cent[ihar],hCrn2_sub_cent_fg[ihar]);
    GetCn4(hCn_sub_cum4_cent[ihar],hCrn4_sub_cent_fg[ihar],hCrn2_sub_cent_fg[ihar]);
    GetVn2(hVn_sub_cum2_cent[ihar],hCn_sub_cum2_cent[ihar]);
    GetVn4(hVn_sub_cum4_cent[ihar],hCn_sub_cum4_cent[ihar]);

    for(int icent=0;icent<NCENT;icent++){
      GetCn2(hCn_cum2_pt[icent][ihar],hCrn2_pt_fg[icent][ihar]);
      GetCn4(hCn_cum4_pt[icent][ihar],hCrn4_pt_fg[icent][ihar],hCrn2_pt_fg[icent][ihar]);
      GetVn2(hVn_cum2_pt[icent][ihar],hCn_cum2_pt[icent][ihar]);
      GetVn4(hVn_cum4_pt[icent][ihar],hCn_cum4_pt[icent][ihar]);

      GetCn2(hCn_sub_cum2_pt[icent][ihar],hCrn2_sub_pt_fg[icent][ihar]);
      GetCn4(hCn_sub_cum4_pt[icent][ihar],hCrn4_sub_pt_fg[icent][ihar],hCrn2_sub_pt_fg[icent][ihar]);
      GetVn2(hVn_sub_cum2_pt[icent][ihar],hCn_sub_cum2_pt[icent][ihar]);
      GetVn4(hVn_sub_cum4_pt[icent][ihar],hCn_sub_cum4_pt[icent][ihar]);
    }
  }
  cout<<"Finished ana Cum"<<endl;
}

void extractor_flat::Init_doAna() {
  TH1::SetDefaultSumw2();
  TH2::SetDefaultSumw2();
  for (int ihar=0; ihar<NHAR; ihar++) {
    //For FCal
    sprintf(name, "hResCent_flat_FCal_har%d", ihar);
    hResCent_flat_FCal[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_bg_FCal_har%d", ihar);
    hResCent_bg_FCal[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_flat_FCal_sub_har%d", ihar);
    hResCent_flat_FCal_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_flat_FCal_ful_har%d", ihar);
    hResCent_flat_FCal_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResXCent_flat_FCal_sub_har%d", ihar);
    hResXCent_flat_FCal_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);
    
    sprintf(name, "hResXCent_flat_FCal_ful_har%d", ihar);
    hResXCent_flat_FCal_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_FCal_har%d", ihar);
    hResCent_mix_FCal[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_FCal_sub_har%d", ihar);
    hResCent_mix_FCal_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_FCal_ful_har%d", ihar);
    hResCent_mix_FCal_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResXCent_mix_FCal_sub_har%d", ihar);
    hResXCent_mix_FCal_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);
    
    sprintf(name, "hResXCent_mix_FCal_ful_har%d", ihar);
    hResXCent_mix_FCal_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    //For Zdc
    sprintf(name, "hResCent_flat_Zdc_har%d", ihar);
    hResCent_flat_Zdc[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_bg_Zdc_har%d", ihar);
    hResCent_bg_Zdc[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_flat_Zdc_sub_har%d", ihar);
    hResCent_flat_Zdc_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_flat_Zdc_ful_har%d", ihar);
    hResCent_flat_Zdc_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResXCent_flat_Zdc_sub_har%d", ihar);
    hResXCent_flat_Zdc_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);
    
    sprintf(name, "hResXCent_flat_Zdc_ful_har%d", ihar);
    hResXCent_flat_Zdc_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_Zdc_har%d", ihar);
    hResCent_mix_Zdc[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_Zdc_sub_har%d", ihar);
    hResCent_mix_Zdc_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResCent_mix_Zdc_ful_har%d", ihar);
    hResCent_mix_Zdc_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);

    sprintf(name, "hResXCent_mix_Zdc_sub_har%d", ihar);
    hResXCent_mix_Zdc_sub[ihar] = new TH1D(name, "", NCENT, cent_mat_double);
    
    sprintf(name, "hResXCent_mix_Zdc_ful_har%d", ihar);
    hResXCent_mix_Zdc_ful[ihar] = new TH1D(name, "", NCENT, cent_mat_double);
  }
  sprintf(name, "hRes_flat_Zdc_allCent");
  hRes_flat_Zdc_allCent = new TH1D(name, "", NHAR, 0.-0.5, NHAR-0.5);
  sprintf(name, "hRes_bg_Zdc_allCent");
  hRes_bg_Zdc_allCent = new TH1D(name, "", NHAR, 0.-0.5, NHAR-0.5);
  sprintf(name, "hRes_mix_Zdc_allCent");
  hRes_mix_Zdc_allCent = new TH1D(name, "", NHAR, 0.-0.5, NHAR-0.5);
  
  //For FCal
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  sprintf(name, "hV%d_FCal_eta_raw_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_raw[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_FCal_eta_res_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_res[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_FCal_eta_raw_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_raw_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_FCal_eta_res_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_res_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_FCal_eta_raw_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_raw_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_FCal_eta_res_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_FCal_eta_res_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);

	  sprintf(name, "hV%dS_FCal_eta_raw_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_raw[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_FCal_eta_res_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_res[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_FCal_eta_raw_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_raw_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_FCal_eta_res_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_res_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_FCal_eta_raw_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_raw_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_FCal_eta_res_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_FCal_eta_res_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	}
      }
    }
  }

  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  sprintf(name, "hV%d_FCal_pt_raw_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_FCal_pt_raw[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%d_FCal_pt_res_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_FCal_pt_res[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_FCal_pt_raw_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVn_FCal_pt_raw_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_FCal_pt_res_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVn_FCal_pt_res_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_FCal_pt_raw_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_FCal_pt_raw_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%d_FCal_pt_res_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_FCal_pt_res_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);

	  sprintf(name, "hV%dS_FCal_pt_raw_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_FCal_pt_raw[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%dS_FCal_pt_res_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_FCal_pt_res[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_FCal_pt_raw_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVnS_FCal_pt_raw_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_FCal_pt_res_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVnS_FCal_pt_res_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_FCal_pt_raw_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_FCal_pt_raw_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%dS_FCal_pt_res_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_FCal_pt_res_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	}
      }
    }
  }
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ipt=0; ipt<NPT+1; ipt++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  //if (ipt==NPT && ieta >= NETA) continue;
	  sprintf(name, "hV%d_FCal_cent_raw_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_FCal_cent_raw[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%d_FCal_cent_res_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_FCal_cent_res[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_FCal_cent_raw_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVn_FCal_cent_raw_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_FCal_cent_res_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVn_FCal_cent_res_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_FCal_cent_raw_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_FCal_cent_raw_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%d_FCal_cent_res_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_FCal_cent_res_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);

	  sprintf(name, "hV%dS_FCal_cent_raw_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_FCal_cent_raw[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%dS_FCal_cent_res_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_FCal_cent_res[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_FCal_cent_raw_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVnS_FCal_cent_raw_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_FCal_cent_res_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVnS_FCal_cent_res_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_FCal_cent_raw_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_FCal_cent_raw_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%dS_FCal_cent_res_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_FCal_cent_res_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	}
      }
    }
  }

  
  //For Zdc
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  sprintf(name, "hV%d_Zdc_eta_raw_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_raw[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_Zdc_eta_res_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_res[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_Zdc_eta_raw_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_raw_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_Zdc_eta_res_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_res_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_Zdc_eta_raw_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_raw_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%d_Zdc_eta_res_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVn_Zdc_eta_res_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);

	  sprintf(name, "hV%dS_Zdc_eta_raw_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_raw[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_Zdc_eta_res_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_res[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_Zdc_eta_raw_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_raw_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_Zdc_eta_res_fg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_res_fg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_Zdc_eta_raw_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_raw_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	  sprintf(name, "hV%dS_Zdc_eta_res_bg_cent%d_side%d_pt%d", ihar+1, icent, iside, ipt);
	  hVnS_Zdc_eta_res_bg[icent][iside][ihar][ipt]=new TH1D(name, "", NETA, &diffEtaBins[0]);
	}
      }
    }
  }

  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  sprintf(name, "hV%d_Zdc_pt_raw_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_Zdc_pt_raw[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%d_Zdc_pt_res_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_Zdc_pt_res[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_Zdc_pt_raw_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_Zdc_pt_res_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%d_Zdc_pt_raw_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%d_Zdc_pt_res_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);

	  sprintf(name, "hV%dS_Zdc_pt_raw_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_Zdc_pt_raw[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%dS_Zdc_pt_res_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_Zdc_pt_res[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_Zdc_pt_raw_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVnS_Zdc_pt_raw_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_Zdc_pt_res_fg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
	  hVnS_Zdc_pt_res_fg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	  sprintf(name, "hV%dS_Zdc_pt_raw_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_Zdc_pt_raw_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
          sprintf(name, "hV%dS_Zdc_pt_res_bg_cent%d_side%d_eta%d", ihar+1, icent, iside, ieta);
          hVnS_Zdc_pt_res_bg[icent][iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	}
      }
    }
  }
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ipt=0; ipt<NPT+1; ipt++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  //if (ipt==NPT && ieta >= NETA) continue;
	  sprintf(name, "hV%d_Zdc_cent_raw_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_Zdc_cent_raw[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%d_Zdc_cent_res_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_Zdc_cent_res[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_Zdc_cent_raw_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVn_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_Zdc_cent_res_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVn_Zdc_cent_res_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%d_Zdc_cent_raw_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%d_Zdc_cent_res_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVn_Zdc_cent_res_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);

	  sprintf(name, "hV%dS_Zdc_cent_raw_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_Zdc_cent_raw[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%dS_Zdc_cent_res_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_Zdc_cent_res[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_Zdc_cent_raw_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVnS_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_Zdc_cent_res_fg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
	  hVnS_Zdc_cent_res_fg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	  sprintf(name, "hV%dS_Zdc_cent_raw_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
          sprintf(name, "hV%dS_Zdc_cent_res_bg_side%d_pt%d_eta%d", ihar+1, iside, ipt, ieta);
          hVnS_Zdc_cent_res_bg[iside][ihar][ipt][ieta]=new TH1D(name, "", NCENT, cent_mat_double);
	}
      }
    }
  }

  //For 10-80% vn(pt)
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ieta=0; ieta<NETA+4; ieta++) {
	sprintf(name, "hV%d_Zdc_pt_raw_allCent_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	sprintf(name, "hV%d_Zdc_pt_res_allCent_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_res_allCent[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	sprintf(name, "hV%d_Zdc_pt_raw_allCent_fg_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	sprintf(name, "hV%d_Zdc_pt_res_allCent_fg_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	sprintf(name, "hV%d_Zdc_pt_raw_allCent_bg_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
	sprintf(name, "hV%d_Zdc_pt_res_allCent_bg_side%d_eta%d", ihar+1, iside, ieta);
	hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]=new TH1D(name, "", NPT, &diffPtBins[0]);
      }
    }
  }
  
  //Cumulant hists
  for(int ihar=0;ihar<NHAR2;ihar++){
    sprintf(name,"hCn_cum2_cent_har%d",ihar);
    hCn_cum2_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);
    sprintf(name,"hVn_cum2_cent_har%d",ihar);
    hVn_cum2_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);

    sprintf(name,"hCn_cum4_cent_har%d",ihar);
    hCn_cum4_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);
    sprintf(name,"hVn_cum4_cent_har%d",ihar);
    hVn_cum4_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);

    sprintf(name,"hCn_sub_cum2_cent_har%d",ihar);
    hCn_sub_cum2_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);
    sprintf(name,"hVn_sub_cum2_cent_har%d",ihar);
    hVn_sub_cum2_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);

    sprintf(name,"hCn_sub_cum4_cent_har%d",ihar);
    hCn_sub_cum4_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);
    sprintf(name,"hVn_sub_cum4_cent_har%d",ihar);
    hVn_sub_cum4_cent[ihar]=new TH1D(name,"",NCENT,cent_mat_double);

    for(int icent=0;icent<NCENT;icent++){
      sprintf(name,"hCn_cum2_pt_cent%d_har%d",icent,ihar);
      hCn_cum2_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);
      sprintf(name,"hVn_cum2_pt_cent%d_har%d",icent,ihar);
      hVn_cum2_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);

      sprintf(name,"hCn_cum4_pt_cent%d_har%d",icent,ihar);
      hCn_cum4_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);
      sprintf(name,"hVn_cum4_pt_cent%d_har%d",icent,ihar);
      hVn_cum4_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);

      sprintf(name,"hCn_sub_cum2_pt_cent%d_har%d",icent,ihar);
      hCn_sub_cum2_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);
      sprintf(name,"hVn_sub_cum2_pt_cent%d_har%d",icent,ihar);
      hVn_sub_cum2_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);

      sprintf(name,"hCn_sub_cum4_pt_cent%d_har%d",icent,ihar);
      hCn_sub_cum4_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);
      sprintf(name,"hVn_sub_cum4_pt_cent%d_har%d",icent,ihar);
      hVn_sub_cum4_pt[icent][ihar]=new TH1D(name,"",NPT,&diffPtBins[0]);
    }
  }
  cout<<"Finished initialising histograms"<<endl;  
}


void extractor_flat::SaveHistos_doAna() {
  fOut_doAna = new TFile("Output_doAna_vn.root", "recreate");
  fOut_doAna->cd();
  /*
    for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
    hVn_FCal[icent][iside][ihar]->Write();
    hVnS_FCal[icent][iside][ihar]->Write();
    hVn_Zdc[icent][iside][ihar]->Write();
    hVnS_Zdc[icent][iside][ihar]->Write();
    }
    }
    }
  */
  //Write Mean pt and Mean eta
  for(int icent=0;icent<NCENT;icent++){
    for(int ich=0;ich<NCH+1;ich++){
      for(int iside=0;iside<NSIDE+1;iside++){
	hMean_pt[icent][ich][iside]->Write();
	hMean_eta[icent][ich][iside]->Write();
      }
    }
  }

  //For FCal
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  hVn_FCal_eta_raw[icent][iside][ihar][ipt]->Write();
	  hVn_FCal_eta_res[icent][iside][ihar][ipt]->Write();
	  hVn_FCal_eta_raw_fg[icent][iside][ihar][ipt]->Write();
	  hVn_FCal_eta_res_fg[icent][iside][ihar][ipt]->Write();
	  hVn_FCal_eta_raw_bg[icent][iside][ihar][ipt]->Write();
	  hVn_FCal_eta_res_bg[icent][iside][ihar][ipt]->Write();
	  /*
	  hVnS_FCal_eta_raw[icent][iside][ihar][ipt]->Write();
	  hVnS_FCal_eta_res[icent][iside][ihar][ipt]->Write();
	  hVnS_FCal_eta_raw_fg[icent][iside][ihar][ipt]->Write();
	  hVnS_FCal_eta_res_fg[icent][iside][ihar][ipt]->Write();
	  hVnS_FCal_eta_raw_bg[icent][iside][ihar][ipt]->Write();
	  hVnS_FCal_eta_res_bg[icent][iside][ihar][ipt]->Write();
	  */
	}
      }
    }
  }

  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
          hVn_FCal_pt_raw[icent][iside][ihar][ieta]->Write();
          hVn_FCal_pt_res[icent][iside][ihar][ieta]->Write();
	  hVn_FCal_pt_raw_fg[icent][iside][ihar][ieta]->Write();
	  hVn_FCal_pt_res_fg[icent][iside][ihar][ieta]->Write();
          hVn_FCal_pt_raw_bg[icent][iside][ihar][ieta]->Write();
          hVn_FCal_pt_res_bg[icent][iside][ihar][ieta]->Write();
	  /*
          hVnS_FCal_pt_raw[icent][iside][ihar][ieta]->Write();
          hVnS_FCal_pt_res[icent][iside][ihar][ieta]->Write();
	  hVnS_FCal_pt_raw_fg[icent][iside][ihar][ieta]->Write();
	  hVnS_FCal_pt_res_fg[icent][iside][ihar][ieta]->Write();
          hVnS_FCal_pt_raw_bg[icent][iside][ihar][ieta]->Write();
          hVnS_FCal_pt_res_bg[icent][iside][ihar][ieta]->Write();
	  */
	}
      }
    }
  }

  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ipt=0; ipt<NPT+1; ipt++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  //if (ipt==NPT && ieta >= NETA) continue;
	  //if(ihar>0) continue;
	  hVn_FCal_cent_raw[iside][ihar][ipt][ieta]->Write();
          hVn_FCal_cent_res[iside][ihar][ipt][ieta]->Write();
	  hVn_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->Write();
	  hVn_FCal_cent_res_fg[iside][ihar][ipt][ieta]->Write();
          hVn_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->Write();
          hVn_FCal_cent_res_bg[iside][ihar][ipt][ieta]->Write();
	  /*
          hVnS_FCal_cent_raw[iside][ihar][ipt][ieta]->Write();
          hVnS_FCal_cent_res[iside][ihar][ipt][ieta]->Write();
	  hVnS_FCal_cent_raw_fg[iside][ihar][ipt][ieta]->Write();
	  hVnS_FCal_cent_res_fg[iside][ihar][ipt][ieta]->Write();
          hVnS_FCal_cent_raw_bg[iside][ihar][ipt][ieta]->Write();
          hVnS_FCal_cent_res_bg[iside][ihar][ipt][ieta]->Write();
	  */
	}
      }
    }
  }
  
  
  //For Zdc
  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ipt=0; ipt<NPT+1; ipt++) {
	  hVn_Zdc_eta_raw[icent][iside][ihar][ipt]->Write();
	  hVn_Zdc_eta_res[icent][iside][ihar][ipt]->Write();
	  hVn_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->Write();
	  hVn_Zdc_eta_res_fg[icent][iside][ihar][ipt]->Write();
	  hVn_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->Write();
	  hVn_Zdc_eta_res_bg[icent][iside][ihar][ipt]->Write();
	  /*
	  hVnS_Zdc_eta_raw[icent][iside][ihar][ipt]->Write();
	  hVnS_Zdc_eta_res[icent][iside][ihar][ipt]->Write();
	  hVnS_Zdc_eta_raw_fg[icent][iside][ihar][ipt]->Write();
	  hVnS_Zdc_eta_res_fg[icent][iside][ihar][ipt]->Write();
	  hVnS_Zdc_eta_raw_bg[icent][iside][ihar][ipt]->Write();
	  hVnS_Zdc_eta_res_bg[icent][iside][ihar][ipt]->Write();
	  */
	}
      }
    }
  }

  for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
          hVn_Zdc_pt_raw[icent][iside][ihar][ieta]->Write();
          hVn_Zdc_pt_res[icent][iside][ihar][ieta]->Write();
	  hVn_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->Write();
	  hVn_Zdc_pt_res_fg[icent][iside][ihar][ieta]->Write();
          hVn_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->Write();
          hVn_Zdc_pt_res_bg[icent][iside][ihar][ieta]->Write();
	  /*
          hVnS_Zdc_pt_raw[icent][iside][ihar][ieta]->Write();
          hVnS_Zdc_pt_res[icent][iside][ihar][ieta]->Write();
	  hVnS_Zdc_pt_raw_fg[icent][iside][ihar][ieta]->Write();
	  hVnS_Zdc_pt_res_fg[icent][iside][ihar][ieta]->Write();
          hVnS_Zdc_pt_raw_bg[icent][iside][ihar][ieta]->Write();
          hVnS_Zdc_pt_res_bg[icent][iside][ihar][ieta]->Write();
	  */
	}
      }
    }
  }
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ipt=0; ipt<NPT+1; ipt++) {
	for (int ieta=0; ieta<NETA+4; ieta++) {
	  //if (ipt==NPT && ieta >= NETA) continue;
          hVn_Zdc_cent_raw[iside][ihar][ipt][ieta]->Write();
          hVn_Zdc_cent_res[iside][ihar][ipt][ieta]->Write();
	  hVn_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->Write();
	  hVn_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->Write();
          hVn_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->Write();
          hVn_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->Write();
	  /*
          hVnS_Zdc_cent_raw[iside][ihar][ipt][ieta]->Write();
          hVnS_Zdc_cent_res[iside][ihar][ipt][ieta]->Write();
	  hVnS_Zdc_cent_raw_fg[iside][ihar][ipt][ieta]->Write();
	  hVnS_Zdc_cent_res_fg[iside][ihar][ipt][ieta]->Write();
          hVnS_Zdc_cent_raw_bg[iside][ihar][ipt][ieta]->Write();
          hVnS_Zdc_cent_res_bg[iside][ihar][ipt][ieta]->Write();
	  */
	}
      }
    }
  }
  //For 5-80%
  for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      for (int ieta=0; ieta<NETA+4; ieta++) {
	hVn_Zdc_pt_raw_allCent[iside][ihar][ieta]->Write();
	hVn_Zdc_pt_res_allCent[iside][ihar][ieta]->Write();
	hVn_Zdc_pt_raw_allCent_fg[iside][ihar][ieta]->Write();
	hVn_Zdc_pt_res_allCent_fg[iside][ihar][ieta]->Write();
	hVn_Zdc_pt_raw_allCent_bg[iside][ihar][ieta]->Write();
	hVn_Zdc_pt_res_allCent_bg[iside][ihar][ieta]->Write();
      }
    }
  }

  for (int icent=0; icent<NCENT; icent++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
      hDphi_FCal_fg[icent][ihar]->Write();
      hDphi_FCal_bg[icent][ihar]->Write();
      hDphi_FCal_rat[icent][ihar]->Write();

      hDphi_Zdc_fg[icent][ihar]->Write();
      hDphi_Zdc_bg[icent][ihar]->Write();
      hDphi_Zdc_rat[icent][ihar]->Write();
    }
  }  
  for (int ihar=0; ihar<NHAR; ihar++) {
    hResCent_flat_FCal[ihar]->Write();
    hResCent_flat_FCal_sub[ihar]->Write();
    hResCent_flat_FCal_ful[ihar]->Write();
    hResXCent_flat_FCal_sub[ihar]->Write();
    hResXCent_flat_FCal_ful[ihar]->Write();

    hResCent_mix_FCal[ihar]->Write();
    hResCent_mix_FCal_sub[ihar]->Write();
    hResCent_mix_FCal_ful[ihar]->Write();
    hResXCent_mix_FCal_sub[ihar]->Write();
    hResXCent_mix_FCal_ful[ihar]->Write();

    hResCent_flat_Zdc[ihar]->Write();
    hResCent_flat_Zdc_sub[ihar]->Write();
    hResCent_flat_Zdc_ful[ihar]->Write();
    hResXCent_flat_Zdc_sub[ihar]->Write();
    hResXCent_flat_Zdc_ful[ihar]->Write();

    hResCent_mix_Zdc[ihar]->Write();
    hResCent_mix_Zdc_sub[ihar]->Write();
    hResCent_mix_Zdc_ful[ihar]->Write();
    hResXCent_mix_Zdc_sub[ihar]->Write();
    hResXCent_mix_Zdc_ful[ihar]->Write();

  }

  //For 5-80%
  for (int ihar=0; ihar<NHAR; ihar++) {
    hDphi_Zdc_allCent_fg[ihar]->Write();
    hDphi_Zdc_allCent_bg[ihar]->Write();
    hDphi_Zdc_allCent_rat[ihar]->Write();
  }
  hRes_mix_Zdc_allCent->Write();
#ifdef withCum
  //Cumulant hists
  for(int ihar=0;ihar<NHAR2;ihar++){
    hCn_cum2_cent[ihar]->Write();
    hVn_cum2_cent[ihar]->Write();
    hCn_cum4_cent[ihar]->Write();
    hVn_cum4_cent[ihar]->Write();

    hCn_sub_cum2_cent[ihar]->Write();
    hVn_sub_cum2_cent[ihar]->Write();
    hCn_sub_cum4_cent[ihar]->Write();
    hVn_sub_cum4_cent[ihar]->Write();

    for(int icent=0;icent<NCENT;icent++){
      hCn_cum2_pt[icent][ihar]->Write();
      hVn_cum2_pt[icent][ihar]->Write();
      hCn_cum4_pt[icent][ihar]->Write();
      hVn_cum4_pt[icent][ihar]->Write();

      hCn_sub_cum2_pt[icent][ihar]->Write();
      hVn_sub_cum2_pt[icent][ihar]->Write();
      hCn_sub_cum4_pt[icent][ihar]->Write();
      hVn_sub_cum4_pt[icent][ihar]->Write();
    }
  }
#endif
  /*
  //Track histograms
  hNTrk->Write();
  hPt->Write();
  hPhi->Write();
  hPhi_wei->Write();
  hEta->Write();
  hTrk_w->Write();
  hTrk_wei->Write();
  hTrk_eff->Write();
  //hEtaPhi->Write();
  //hEtaPhi_wei->Write();
  */
  fOut_doAna->Close();
}
