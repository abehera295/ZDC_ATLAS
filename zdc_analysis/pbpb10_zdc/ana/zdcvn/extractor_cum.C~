
void extractor_flat::ReadHistos_cum() {
  /*
    TFile *fIn_vn=new TFile("./Output_zdc_psi.root","read");
    for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
    sprintf(name, "hProf_sumx_side%d_har%d", iside, ihar);
    h_prof_sumx[iside][ihar] = (TProfile*)fIn_vn->Get(name);
    sprintf(name, "hProf_sumy_side%d_har%d", iside, ihar);
    h_prof_sumy[iside][ihar] = (TProfile*)fIn_vn->Get(name);
    }
    }
    for (int icent=0; icent<NCENT; icent++) {
    for (int iside=0; iside<NSIDE+1; iside++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
    sprintf(name, "hProf_flatcos_cent%d_side%d_har%d", icent, iside, ihar);
    h_prof_flatCos[icent][iside][ihar] = (TProfile*)fIn_vn->Get(name);
    sprintf(name, "hProf_flatsin_cent%d_side%d_har%d", icent, iside, ihar);
    h_prof_flatSin[icent][iside][ihar] = (TProfile*)fIn_vn->Get(name);
    }
    }
    }

    for (int icent=0; icent<NCENT; icent++) {
    for (int ihar=0; ihar<NHAR; ihar++) {
    sprintf(name, "h_Dphi_fg_cent%d_har%d", icent, ihar);
    hDphi_fg[icent][ihar] = (TH1D*)fIn_vn->Get(name);
    sprintf(name, "h_Dphi_bg_cent%d_har%d", icent, ihar);
    hDphi_bg[icent][ihar] = (TH1D*)fIn_vn->Get(name);

    sprintf(name, "h_Res_flat_cent%d_har%d", icent, ihar);
    hRes_flat[icent][ihar] = (TH1D*)fIn_vn->Get(name);
    }
    }
  */
}

void extractor_flat::Run_cum() {

  int evts_min=NEv_id*NEv;
  int evts_max=(NEv_id+1)*NEv;

  Long64_t nentries = fChain->GetEntriesFast();
  Long64_t nbytes = 0, nb = 0;
  /*
  for (int icent=0; icent<NCENT_1p; icent++) {
    for (int iside=0; iside<NSIDE; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	(Psi_FCal_store[icent][iside][ihar]).assign(0,0);
        (Psi_Zdc_store[icent][iside][ihar]).assign(0,0);
      }
    }
  }
  */
  cout<<"Run events from "<<evts_min<<" to "<<evts_max<<endl;

  for (Long64_t jentry=0; jentry<nentries;jentry++) {
    Long64_t ientry = LoadTree(jentry);
    if (ientry < 0) break;
    nb = fChain->GetEntry(jentry);

    if (nb <=0)        {cout<<"Nbytes became <=0"<<endl;break;}
    if(jentry<evts_min || jentry>=evts_max) continue;
    if(jentry%10000==0) {cout<<"running event "<<jentry<<endl ;}
    //if (jentry > 10000) break;
    //-------------------------------------------------------------------------------------------------
    centb = get_centb(Fcal_Et);
    if (centb < 0) continue;
    vzb=get_vzb(vx_z);
    nevents++;
    hCent->Fill(centb);
    //FillGlobal();
    
    double Psi_FCal[NSIDE+1][NHAR];
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
	//iside=0 is negative FCal and iside=1 is +ve FCal and iside=2 is full FCal
	if(iside==0) {Qx_FCal[iside][ihar]=Qx[3][ihar];Qy_FCal[iside][ihar]=Qy[3][ihar];Qw_FCal[iside]=Qw[3];}
	if(iside==1) {Qx_FCal[iside][ihar]=Qx[2][ihar];Qy_FCal[iside][ihar]=Qy[2][ihar];Qw_FCal[iside]=Qw[2];}
	if(iside==2) {Qx_FCal[iside][ihar]=Qx[2][ihar]+Qx[3][ihar];Qy_FCal[iside][ihar]=Qy[2][ihar]+Qy[3][ihar];Qw_FCal[iside]=Qw[2]+Qw[3];}
      }
    }
    for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
        //iside=0 is negative ZDC and iside=1 is +ve ZDC and iside=2 is full ZDC
	double psi1=atan2(Qy_zdc[iside][0],Qx_zdc[iside][0]);
        //Qx_Zdc[iside][ihar]=Qx_zdc[iside][ihar];
	//Qy_Zdc[iside][ihar]=Qy_zdc[iside][ihar];
	Qx_Zdc[iside][ihar]=cos((ihar+1)*psi1);
	Qy_Zdc[iside][ihar]=sin((ihar+1)*psi1);
	Qw_Zdc[iside]=Qw_zdc[iside];
      }
    }
    GetTrackQn_cum();
    FillHisto_cum(jentry);

    /*
      for (int ihar=0; ihar<NHAR; ihar++) {
      //Psi Store creation 
      int str_size0 = (Psi_FCal_store[centb_1p][0][ihar]).size();
      int str_size1 = (Psi_FCal_store[centb_1p][1][ihar]).size();
      if(str_size0>0){
      for (int isiz=0; isiz<str_size0; isiz++) {
      //dPsi = (ihar+1)*( Psi_FCal.at(0).at(ihar) - (Psi_store[centb_1p][1][ihar]).at(isiz) );
      dPsi_FCal = (ihar+2)*( Psi_FCal[1][ihar] - (Psi_FCal_store[centb_1p][0][ihar]).at(isiz) );
      if (dPsi_FCal < -PI) dPsi_FCal += 2*PI;
      if (dPsi_FCal >  PI) dPsi_FCal -= 2*PI;
      hDphi_FCal_bg[centb][ihar]->Fill(dPsi_FCal);
      }
      }
      if(str_size1>0){
      for (int isiz=0; isiz<str_size1; isiz++) {
      dPsi_FCal = (ihar+2)*( Psi_FCal[0][ihar] - (Psi_FCal_store[centb_1p][1][ihar]).at(isiz) );
      if (dPsi_FCal < -PI) dPsi_FCal += 2*PI;
      if (dPsi_FCal >  PI) dPsi_FCal -= 2*PI;
      hDphi_FCal_bg[centb][ihar]->Fill(-dPsi_FCal);
      }
      }
      int str_size2 = (Psi_Zdc_store[centb_1p][0][ihar]).size();
      int str_size3 = (Psi_Zdc_store[centb_1p][1][ihar]).size();
      if(str_size2>0){
      for (int isiz=0; isiz<str_size2; isiz++) {
      //dPsi = (ihar+1)*( Psi_Zdc.at(0).at(ihar) - (Psi_store[centb_1p][1][ihar]).at(isiz) );
      dPsi_Zdc = (ihar+1)*( Psi_Zdc[1][ihar] - (Psi_Zdc_store[centb_1p][0][ihar]).at(isiz) );
      if (dPsi_Zdc < -PI) dPsi_Zdc += 2*PI;
      if (dPsi_Zdc >  PI) dPsi_Zdc -= 2*PI;
      hDphi_Zdc_bg[centb][ihar]->Fill(dPsi_Zdc);
      }
      }
      if(str_size3>0){
      for (int isiz=0; isiz<str_size3; isiz++) {
      dPsi_Zdc = (ihar+1)*( Psi_Zdc[0][ihar] - (Psi_Zdc_store[centb_1p][1][ihar]).at(isiz) );
      if (dPsi_Zdc < -PI) dPsi_Zdc += 2*PI;
      if (dPsi_Zdc >  PI) dPsi_Zdc -= 2*PI;
      hDphi_Zdc_bg[centb][ihar]->Fill(-dPsi_Zdc);
      }
      }
      }

      FillTrackVn(Psi_FCal,Psi_Zdc);
      //Fill store for Psi background
      for (int iside=0; iside<NSIDE+1; iside++) {
      for (int ihar=0; ihar<NHAR; ihar++) {
      (Psi_FCal_store[centb_1p][iside][ihar]).push_back(Psi_FCal[iside][ihar]);
      (Psi_Zdc_store[centb_1p][iside][ihar]).push_back(Psi_Zdc[iside][ihar]);
      if ((Psi_FCal_store[centb_1p][iside][ihar]).size() >= STORE_DEP) (Psi_FCal_store[centb_1p][iside][ihar]).erase((Psi_FCal_store[centb_1p][iside][ihar]).begin());
      if ((Psi_Zdc_store[centb_1p][iside][ihar]).size() >= STORE_DEP) (Psi_Zdc_store[centb_1p][iside][ihar]).erase((Psi_Zdc_store[centb_1p][iside][ihar]).begin());
      }
      }
    */
  }//Event Loop ends
  cout<<"Finished ana"<<endl;
}


void extractor_flat::GetTrackQn_cum(){
  ntrkQ = 0;
  memset(Qx_ID_cum,0,sizeof(Qx_ID_cum));
  memset(Qy_ID_cum,0,sizeof(Qy_ID_cum));
  memset(Qw_ID_cum,0,sizeof(Qw_ID_cum));
  for(int itrk=0; itrk<trk_n; itrk++){
    //if(trk_Quality2[itrk] < 3) continue;
  
      
    //new data format
    UInt_t trkb = trk_data[itrk];
    double btmp=0;
    trk_phi0_wrt_PV[itrk]  = trkb&PHIM;// btmp  = trk_phi0_wrt_PV[itrk];
    trk_phi0_wrt_PV[itrk]+=0.5;   trk_phi0_wrt_PV[itrk] *= PIslice;     trkb >>= PHIS;
    //trk_phibin[itrk] = btmp/(512)*NPHI; trk_phibin[itrk]++;

    trk_eta[itrk]  = trkb&ETAM; btmp  = trk_eta[itrk];
    trk_eta[itrk]+=0.5;   trk_eta[itrk] *= ETAslice;   trk_eta[itrk] -=ETAoff;  trkb >>= ETAS;
    //trk_etabin[itrk] = btmp/(500.0)*NETA; trk_etabin[itrk]++;

    trk_charge[itrk]= trkb&CHM;       trkb >>= CHS;
    trk_pt[itrk]=get_pt(trkb&PTM);
    //trk_ptbin[itrk] = getptbin(trkb&PTM);
    trkb >>= PTS;
    //trk_ptbin[itrk] = get_ptbin2(trk_pt[itrk]);
    trk_Quality2[itrk]  = trkb&QUALM;
    //trk_w[itrk]  = trkb&QUALM;

    //double ptgev = trk_pt[itrk]/1000.0;
    double ptgev=trk_pt[itrk];
    int ptBin  = get_ptBin(ptgev);       if (ptBin  < 0) continue;
    int etaBin = get_etaBin(trk_eta[itrk]); if (etaBin < 0) continue;
    int sign_eta = 1;
    if (trk_eta[itrk] < 0) sign_eta = -1;
    
    trk_wei[itrk] = 1.;
    trk_eff[itrk]=1.;
    trk_wei[itrk]= 1./(fabs(trk_w[itrk])/256.0 * 1.4+0.3);//0.3-1.7;
    //trk_wei[itrk] = 1.;
    trk_eff[itrk]=1./effTool->detTrkEff(Centrality,trk_eta[itrk],trk_pt[itrk]);//Trk Efficiency from Tool.cxx
    trk_phi[itrk]=trk_phi0_wrt_PV[itrk];
    hEta->Fill(trk_eta[itrk]);
    hPhi->Fill(trk_phi[itrk]);
    hPhi_wei->Fill(trk_phi[itrk],trk_wei[itrk]);
    hPt->Fill(ptgev);
    hTrk_w->Fill(trk_w[itrk]);
    hTrk_wei->Fill(trk_wei[itrk]);
    hTrk_eff->Fill(trk_eff[itrk]);
    //hEtaPhi->Fill(trk_eta[itrk],trk_phi[itrk]);
    //hEtaPhi_wei->Fill(trk_eta[itrk],trk_phi[itrk],trk_eff[itrk]);
    
    //Apply track efficiency
    trk_wei[itrk]/=trk_eff[itrk];
    
    int ipt=ptBin;
    int iside=-1,ich=0,ieta=0;
    double deta=5./3.;
    //if(trk_eta[itrk]<(-2.5+deta)) iside=0;
    //else if(trk_eta[itrk]>(-2.5+2.*deta)) iside=1;
    if(trk_eta[itrk]<0.) iside=0;
    else if(trk_eta[itrk]>=0.) iside=1;

    if(trk_charge[itrk]==0) ich=0;
    else ich=1;
    for(int i=0;i<NETA2;i++){
      double deta=0.+(i+1)*(2.5/NETA2);
      if(fabs(trk_eta[itrk])>deta-0.25 && fabs(trk_eta[itrk])<=deta) {ieta=i; break;}
    }
    if(iside>-1) hMean_pt[centb][ich][iside]->Fill(ipt,trk_pt[itrk]);
    if(iside>-1) hMean_pt[centb][NCH][iside]->Fill(ipt,trk_pt[itrk]);
    hMean_pt[centb][ich][NSIDE]->Fill(ipt,trk_pt[itrk]);
    hMean_pt[centb][NCH][NSIDE]->Fill(ipt,trk_pt[itrk]);
    
    if(iside>-1) hMean_eta[centb][ich][iside]->Fill(ieta,trk_eta[itrk]);
    if(iside>-1) hMean_eta[centb][NCH][iside]->Fill(ieta,trk_eta[itrk]);
    hMean_eta[centb][ich][NSIDE]->Fill(ieta,trk_eta[itrk]);
    hMean_eta[centb][NCH][NSIDE]->Fill(ieta,trk_eta[itrk]);

    for(int ihar=0;ihar<NHAR3;ihar++){
      for(int ik=0;ik<NK;ik++){
	if(iside>-1) Qx_ID_cum[ipt][iside][ihar][ik]+=cos(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	if(iside>-1) Qx_ID_cum[NPT][iside][ihar][ik]+=cos(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	Qx_ID_cum[ipt][NSIDE][ihar][ik]+=cos(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	Qx_ID_cum[NPT][NSIDE][ihar][ik]+=cos(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	
	if(iside>-1) Qy_ID_cum[ipt][iside][ihar][ik]+=sin(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	if(iside>-1) Qy_ID_cum[NPT][iside][ihar][ik]+=sin(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	Qy_ID_cum[ipt][NSIDE][ihar][ik]+=sin(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	Qy_ID_cum[NPT][NSIDE][ihar][ik]+=sin(trk_phi[itrk]*(ihar+2))*pow(trk_wei[itrk],ik+1);
	if(ihar==0){
	  for(int ip=0;ip<NP;ip++){
	    if(iside>-1) Qw_ID_cum[ipt][iside][ip][ik]+=pow(trk_wei[itrk],ik+1);
	    if(iside>-1) Qw_ID_cum[NPT][iside][ip][ik]+=pow(trk_wei[itrk],ik+1);
	    Qw_ID_cum[ipt][NSIDE][ip][ik]+=pow(trk_wei[itrk],ik+1);
	    Qw_ID_cum[NPT][NSIDE][ip][ik]+=pow(trk_wei[itrk],ik+1);
	  }
	}
      }
    }
    
    ntrkQ++;
  }//Track loop ends
  hNTrk->Fill(ntrkQ);
}

void extractor_flat::FillHisto_cum(int id0){

  EVENT_PTR ev = new Event(id0);
  ev->icent = centb;
  ev->ivz = vzb;
  for(int iside=0;iside<NSIDE+1;iside++){
    for(int ihar=0;ihar<NHAR;ihar++){
      if(Qw_FCal[iside]!=0.) Qx_FCal[iside][ihar]/=Qw_FCal[iside]; else Qx_FCal[iside][ihar]=0.;
      if(Qw_FCal[iside]!=0.) Qy_FCal[iside][ihar]/=Qw_FCal[iside]; else Qy_FCal[iside][ihar]=0.;
      if(Qw_Zdc[iside]!=0.) Qx_Zdc[iside][ihar]/=Qw_Zdc[iside]; else Qx_Zdc[iside][ihar]=0.;
      if(Qw_Zdc[iside]!=0.) Qy_Zdc[iside][ihar]/=Qw_Zdc[iside]; else Qy_Zdc[iside][ihar]=0.;
      ev->Qx_FCal[iside][ihar] = Qx_FCal[iside][ihar];
      ev->Qy_FCal[iside][ihar] = Qy_FCal[iside][ihar];
      if(ihar==0) ev->Qw_FCal[iside] = Qw_FCal[iside];
      ev->Qx_Zdc[iside][ihar] = Qx_Zdc[iside][ihar];
      ev->Qy_Zdc[iside][ihar] = Qy_Zdc[iside][ihar];
      if(ihar==0) ev->Qw_Zdc[iside] = Qw_Zdc[iside];
    }
    for(int ihar=0;ihar<NHAR3;ihar++){
      for(int ipt=0;ipt<NPT+1;ipt++){
	for(int ik=0;ik<NK;ik++){
	  //if(Qw_ID[ipt][iside][ik]!=0.) Qx_ID_cum[ipt][iside][ihar][ik]/=Qw_ID_cum[ipt][iside][ik]; else Qx_ID_cum[ipt][iside][ihar][ik]=0.;
	  //if(Qw_ID_cum[ipt][iside][ik]!=0.) Qy_ID_cum[ipt][iside][ihar][ik]/=Qw_ID_cum[ipt][iside][ik]; else Qy_ID_cum[ipt][iside][ihar][ik]=0.;
	  ev->Qx_ID_cum[ipt][iside][ihar][ik] = Qx_ID_cum[ipt][iside][ihar][ik];
	  ev->Qy_ID_cum[ipt][iside][ihar][ik] = Qy_ID_cum[ipt][iside][ihar][ik];
	  if(ihar==0){
	    for(int ip=0;ip<NP;ip++){
	      Qw_ID_cum[ipt][iside][ip][ik]=pow(Qw_ID_cum[ipt][iside][ip][ik],ip+1);
	      ev->Qw_ID_cum[ipt][iside][ip][ik]= Qw_ID_cum[ipt][iside][ip][ik];
	    }//ip
	  }//if
	}//ik
      }//ipt
    }//ihar
  }//iside ends
  Fill_2PCfg_cum(ev);
  Fill_4PCfg_cum(ev);
  //Fill_2PCbg_cum(ev,ev);
  delete ev;
}

void extractor_flat::Fill_2PCfg_cum(Event* ev1){
  //My code
  TComplex q1_ID[NPT+1][NSIDE+1][NHAR3][NK],q1c_ID[NPT+1][NSIDE+1][NHAR3][NK];
  double qw1_ID[NPT+1][NSIDE+1][NP][NK];

  TComplex q2_FCal[NSIDE+1][NHAR],q2c_FCal[NSIDE+1][NHAR];
  TComplex q2_Zdc[NSIDE+1][NHAR],q2c_Zdc[NSIDE+1][NHAR];
  double qw2_FCal[NSIDE+1];
  double qw2_Zdc[NSIDE+1];

  int icent=ev1->icent;
  for(int ihar=0;ihar<NHAR3;ihar++){
    for(int iside=0;iside<NSIDE+1;iside++){
      for(int ipt=0;ipt<NPT+1;ipt++){
	for(int ik=0;ik<NK;ik++){
	  q1_ID[ipt][iside][ihar][ik]=TComplex(ev1->Qx_ID_cum[ipt][iside][ihar][ik],ev1->Qy_ID_cum[ipt][iside][ihar][ik]);
	  q1c_ID[ipt][iside][ihar][ik]=TComplex::Conjugate(q1_ID[ipt][iside][ihar][ik]);
	  if(ihar==0){
	    for(int ip=0;ip<NP;ip++){
	      qw1_ID[ipt][iside][ip][ik]=ev1->Qw_ID_cum[ipt][iside][ip][ik];
	    }
	  }
	}
      }
    }
  }

  //Calculate Corr_n{2}
  TComplex qtmp;
  double ev_wei;
  double Crn2,Crn4;
  int iside1,iside2,iside3;
  //Standard Cumulant  
  for(int ihar=0;ihar<NHAR2;ihar++){
    //As a function of pt
    for(int ipt=0;ipt<NPT;ipt++){
      iside1=NSIDE,iside2=NSIDE;
      qtmp = q1_ID[ipt][iside1][ihar][0]*q1c_ID[ipt][iside2][ihar][0];
      Crn2=qtmp.Re()-qw1_ID[ipt][iside1][0][1];
      double den=qw1_ID[ipt][iside1][1][0]-qw1_ID[ipt][iside2][0][1];
      Crn2/=den;
      if(fabs(den)>1e-6) hCrn2_pt_fg[icent][ihar]->Fill(ipt,Crn2,den);
    }
    //As a function of cent
    iside1=NSIDE,iside2=NSIDE;
    qtmp = q1_ID[NPT][iside1][ihar][0]*q1c_ID[NPT][iside2][ihar][0];
    Crn2=qtmp.Re()-qw1_ID[NPT][iside1][0][1];
    double den=qw1_ID[NPT][iside1][1][0]-qw1_ID[NPT][iside2][0][1];
    Crn2/=den;
    if(fabs(den)>1e-6) hCrn2_cent_fg[ihar]->Fill(icent,Crn2,den);
  }

  //2-Subevent Cumulant
  for(int ihar=0;ihar<NHAR2;ihar++){
    //As a function of pt
    for(int ipt=0;ipt<NPT;ipt++){
      iside1=0,iside2=1;
      qtmp = q1_ID[ipt][iside1][ihar][0]*q1c_ID[ipt][iside2][ihar][0];
      Crn2=qtmp.Re();
      double den=qw1_ID[ipt][iside1][0][0]*qw1_ID[ipt][iside2][0][0];
      Crn2/=den;
      if(fabs(den)>1e-6) hCrn2_sub_pt_fg[icent][ihar]->Fill(ipt,Crn2,den);
    }
    //As a function of cent
    iside1=0,iside2=1;
    qtmp = q1_ID[NPT][iside1][ihar][0]*q1c_ID[NPT][iside2][ihar][0];
    Crn2=qtmp.Re();
    double den=qw1_ID[NPT][iside1][0][0]*qw1_ID[NPT][iside2][0][0];
    Crn2/=den;
    if(fabs(den)>1e-6) hCrn2_sub_cent_fg[ihar]->Fill(icent,Crn2,den);
  }
  
}

void extractor_flat::Fill_4PCfg_cum(Event* ev1){
  TComplex q1_ID[NPT+1][NSIDE+1][NHAR3][NK],q1c_ID[NPT+1][NSIDE+1][NHAR3][NK];
  double qw1_ID[NPT+1][NSIDE+1][NP][NK];

  TComplex q2_FCal[NSIDE+1][NHAR],q2c_FCal[NSIDE+1][NHAR];
  TComplex q2_Zdc[NSIDE+1][NHAR],q2c_Zdc[NSIDE+1][NHAR];
  double qw2_FCal[NSIDE+1];
  double qw2_Zdc[NSIDE+1];

  int icent=ev1->icent;
  for(int ihar=0;ihar<NHAR3;ihar++){
    for(int iside=0;iside<NSIDE+1;iside++){
      for(int ipt=0;ipt<NPT+1;ipt++){
	for(int ik=0;ik<NK;ik++){
	  q1_ID[ipt][iside][ihar][ik]=TComplex(ev1->Qx_ID_cum[ipt][iside][ihar][ik],ev1->Qy_ID_cum[ipt][iside][ihar][ik]);
	  q1c_ID[ipt][iside][ihar][ik]=TComplex::Conjugate(q1_ID[ipt][iside][ihar][ik]);
	  if(ihar==0){
	    for(int ip=0;ip<NP;ip++){
	      qw1_ID[ipt][iside][ip][ik]=ev1->Qw_ID_cum[ipt][iside][ip][ik];
	    }
	  }
	}
      }
    }
  }
  //Calculate Corr_n{4}
  TComplex qtmp[10];
  double ev_wei;
  double Crn2,Crn4;
  int iside1,iside2,iside3;
  double S[NP][NK],Sa[NP][NK],Sb[NP][NK];
  //Direct Cumulant
  for(int ihar=0;ihar<NHAR2;ihar++){
    //As a function of pt
    for(int ipt=0;ipt<NPT;ipt++){
      iside1=NSIDE,iside2=NSIDE;
      for(int ip=0;ip<NP;ip++){
	for(int ik=0;ik<NK;ik++){
	  S[ip][ik]=qw1_ID[ipt][iside1][ip][ik];
	}
      }
      TComplex Qn1=q1_ID[ipt][iside1][ihar][0];
      TComplex QCn1=q1c_ID[ipt][iside1][ihar][0];
      TComplex Qn3=q1_ID[ipt][iside1][ihar][2];
      TComplex QCn3=q1c_ID[ipt][iside1][ihar][2];
      TComplex Q2n2=q1_ID[ipt][iside1][2*(ihar+2)-2][1];
      TComplex QC2n2=q1c_ID[ipt][iside1][2*(ihar+2)-2][1];
      Crn4 = (Qn1*Qn1*QCn1*QCn1).Re() + (Q2n2*QC2n2).Re() - 2.*(Q2n2*QCn1*QCn1).Re() + 8.*(Qn3*QCn1).Re();
      Crn4+= -4.*S[0][1]*(Qn1*QCn1).Re() + 2.*S[1][1] - 6.*S[0][3];
      double den=S[3][0] + 8.*S[0][2]*S[0][0] - 6.*S[0][1]*S[1][0] + 3.*S[1][1] - 6.*S[0][3];
      Crn4/=den;
      if(fabs(den)>1e-6) hCrn4_pt_fg[icent][ihar]->Fill(ipt,Crn4,den);
    }
    //As a function of cent
    iside1=NSIDE,iside2=NSIDE;
    for(int ip=0;ip<NP;ip++){
      for(int ik=0;ik<NK;ik++){
	S[ip][ik]=qw1_ID[NPT][iside1][ip][ik];
      }
    }
    TComplex Qn1=q1_ID[NPT][iside1][ihar][0];
    TComplex QCn1=q1c_ID[NPT][iside1][ihar][0];
    TComplex Qn3=q1_ID[NPT][iside1][ihar][2];
    TComplex QCn3=q1c_ID[NPT][iside1][ihar][2];
    TComplex Q2n2=q1_ID[NPT][iside1][2*(ihar+2)-2][1];
    TComplex QC2n2=q1c_ID[NPT][iside1][2*(ihar+2)-2][1];
    Crn4 = (Qn1*Qn1*QCn1*QCn1).Re() + (Q2n2*QC2n2).Re() - 2.*(Q2n2*QCn1*QCn1).Re() + 8.*(Qn3*QCn1).Re();
    Crn4+= -4.*S[0][1]*(Qn1*QCn1).Re() + 2.*S[1][1] - 6.*S[0][3];
    double den=S[3][0] + 8.*S[0][2]*S[0][0] - 6.*S[0][1]*S[1][0] + 3.*S[1][1] - 6.*S[0][3];
    Crn4/=den;
    if(fabs(den)>1e-6) hCrn4_cent_fg[ihar]->Fill(icent,Crn4,den);
  }

  //2-Subevent Cumulant
  for(int ihar=0;ihar<NHAR2;ihar++){
    //As a function of pt
    for(int ipt=0;ipt<NPT;ipt++){
      iside1=0,iside2=1;
      for(int ip=0;ip<NP;ip++){
	for(int ik=0;ik<NK;ik++){
	  Sa[ip][ik]=qw1_ID[ipt][iside1][ip][ik];
	  Sb[ip][ik]=qw1_ID[ipt][iside2][ip][ik];
	}
      }
      TComplex Qn1a=q1_ID[ipt][iside1][ihar][0];
      TComplex QCn1a=q1c_ID[ipt][iside1][ihar][0];
      TComplex Q2n2a=q1_ID[ipt][iside1][2*(ihar+2)-2][1];
      TComplex QC2n2a=q1c_ID[ipt][iside1][2*(ihar+2)-2][1];

      TComplex Qn1b=q1_ID[ipt][iside2][ihar][0];
      TComplex QCn1b=q1c_ID[ipt][iside2][ihar][0];
      TComplex Q2n2b=q1_ID[ipt][iside2][2*(ihar+2)-2][1];
      TComplex QC2n2b=q1c_ID[ipt][iside2][2*(ihar+2)-2][1];

      Crn4 = (Qn1a*Qn1a*QCn1b*QCn1b).Re() - (Q2n2a*QCn1b*QCn1b).Re() - (Q2n2b*QCn1a*QCn1a).Re() + (Q2n2a*QC2n2b).Re();
      double den=Sa[1][0]*Sb[1][0] - Sa[0][1]*Sb[1][0] - Sa[1][0]*Sb[0][1] - Sa[0][1]*Sb[0][1];
      Crn4/=den;
      if(fabs(den)>1e-6) hCrn4_sub_pt_fg[icent][ihar]->Fill(ipt,Crn4,den);
    }
    //As a function of cent
    iside1=0,iside2=1;
    for(int ip=0;ip<NP;ip++){
      for(int ik=0;ik<NK;ik++){
	Sa[ip][ik]=qw1_ID[NPT][iside1][ip][ik];
	Sb[ip][ik]=qw1_ID[NPT][iside2][ip][ik];
      }
    }
    TComplex Qn1a=q1_ID[NPT][iside1][ihar][0];
    TComplex QCn1a=q1c_ID[NPT][iside1][ihar][0];
    TComplex Q2n2a=q1_ID[NPT][iside1][2*(ihar+2)-2][1];
    TComplex QC2n2a=q1c_ID[NPT][iside1][2*(ihar+2)-2][1];
    
    TComplex Qn1b=q1_ID[NPT][iside2][ihar][0];
    TComplex QCn1b=q1c_ID[NPT][iside2][ihar][0];
    TComplex Q2n2b=q1_ID[NPT][iside2][2*(ihar+2)-2][1];
    TComplex QC2n2b=q1c_ID[NPT][iside2][2*(ihar+2)-2][1];
    
    Crn4 = (Qn1a*Qn1a*QCn1b*QCn1b).Re() - (Q2n2a*QCn1b*QCn1b).Re() - (Q2n2b*QCn1a*QCn1a).Re() + (Q2n2a*QC2n2b).Re();
    double den=Sa[1][0]*Sb[1][0] - Sa[0][1]*Sb[1][0] - Sa[1][0]*Sb[0][1] - Sa[0][1]*Sb[0][1];
    Crn4/=den;
    if(fabs(den)>1e-6) hCrn4_sub_cent_fg[ihar]->Fill(icent,Crn4,den);
  }
  

}

void extractor_flat::Init_cum() {
  //set_ptBins ();
  //set_etaBins();
  
  hEt      = new TH1D("hEt", "", 5000, 0, 5000); hEt->Sumw2();
  hNtrk    = new TH1D("hNtrk", "", 5000, 0, 5000); hNtrk->Sumw2();
  hEt_ntrk = new TH2D("h_et_ntrk", "", 400, 0, 4000, 400, 0, 4000); hEt_ntrk->Sumw2();
  //Track histograms
  hNTrk    = new TH1D("hNTrk", "", 5000, 0, 5000); hNtrk->Sumw2();
  hCent    = new TH1D("hCent", "", NCENT, -0.5, NCENT-0.5); hCent->Sumw2();
  hPt = new TH1D("hPt","",1000,0.,25.); hPt->Sumw2();
  hPhi = new TH1D("hPhi","",50,0.,7); hPhi->Sumw2();
  hPhi_wei = new TH1D("hPhi_wei","",50,0.,7.); hPhi_wei->Sumw2();
  hEta = new TH1D("hEta","",100,-2.5,2.5); hEta->Sumw2();
  hTrk_w = new TH1D("hTrk_w","",1000,-300.,300.); hTrk_w->Sumw2();
  hTrk_wei = new TH1D("hTrk_wei","",1000,-5.,5.); hTrk_wei->Sumw2();
  hTrk_eff=new TH1D("hTrk_eff","",1000,-5.,5.); hTrk_eff->Sumw2();

  //Mean pt and eta distributions
  for(int icent=0;icent<NCENT;icent++){
    for(int ich=0;ich<NCH+1;ich++){
      for(int iside=0;iside<NSIDE+1;iside++){
	sprintf(name,"hMean_pt_cent%d_ch%d_side%d",icent,ich,iside);
	hMean_pt[icent][ich][iside]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
	sprintf(name,"hMean_eta_cent%d_ch%d_side%d",icent,ich,iside);
	hMean_eta[icent][ich][iside]=new TProfile(name,"",NETA2,0.-0.5,NETA2-0.5);
      }
    }
  }
  //2PC resolution
  for(int ihar=0;ihar<NHAR;ihar++){
    sprintf(name,"hRes_FCal_fg_har%d",ihar);
    hRes_FCal_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
    sprintf(name,"hRes_Zdc_fg_har%d",ihar);
    hRes_Zdc_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);

    sprintf(name,"hRes_FCal_bg_har%d",ihar);
    hRes_FCal_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
    sprintf(name,"hRes_Zdc_bg_har%d",ihar);
    hRes_Zdc_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
  }

  //2PC and 4PC Correlation hists
  for(int ihar=0;ihar<NHAR2;ihar++){
      sprintf(name,"hCrn2_cent_fg_har%d",ihar);
      hCrn2_cent_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn4_cent_fg_har%d",ihar);
      hCrn4_cent_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn2_sub_cent_fg_har%d",ihar);
      hCrn2_sub_cent_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn4_sub_cent_fg_har%d",ihar);
      hCrn4_sub_cent_fg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);

      sprintf(name,"hCrn2_cent_bg_har%d",ihar);
      hCrn2_cent_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn4_cent_bg_har%d",ihar);
      hCrn4_cent_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn2_sub_cent_bg_har%d",ihar);
      hCrn2_sub_cent_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
      sprintf(name,"hCrn4_sub_cent_bg_har%d",ihar);
      hCrn4_sub_cent_bg[ihar]=new TProfile(name,"",NCENT,0.-0.5,NCENT-0.5);
    for(int icent=0;icent<NCENT;icent++){
      sprintf(name,"hCrn2_pt_fg_cent%d_har%d",icent,ihar);
      hCrn2_pt_fg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn4_pt_fg_cent%d_har%d",icent,ihar);
      hCrn4_pt_fg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn2_sub_pt_fg_cent%d_har%d",icent,ihar);
      hCrn2_sub_pt_fg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn4_sub_pt_fg_cent%d_har%d",icent,ihar);
      hCrn4_sub_pt_fg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);

      sprintf(name,"hCrn2_pt_bg_cent%d_har%d",icent,ihar);
      hCrn2_pt_bg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn4_pt_bg_cent%d_har%d",icent,ihar);
      hCrn4_pt_bg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn2_sub_pt_bg_cent%d_har%d",icent,ihar);
      hCrn2_sub_pt_bg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
      sprintf(name,"hCrn4_sub_pt_bg_cent%d_har%d",icent,ihar);
      hCrn4_sub_pt_bg[icent][ihar]=new TProfile(name,"",NPT,0.-0.5,NPT-0.5);
    }
  }
  cout<<"Finished initialising hists"<<endl;
}


void extractor_flat::SaveHistos_cum() {
  fOut_cum->cd();
  for(int icent=0;icent<NCENT;icent++){
    for(int ich=0;ich<NCH+1;ich++){
      for(int iside=0;iside<NSIDE+1;iside++){
	hMean_pt[icent][ich][iside]->Write();
	hMean_eta[icent][ich][iside]->Write();
      }
    }
  }
  for(int ihar=0;ihar<NHAR;ihar++){
    hRes_FCal_fg[ihar]->Write();
    hRes_Zdc_fg[ihar]->Write();
    hRes_FCal_bg[ihar]->Write();
    hRes_Zdc_bg[ihar]->Write();
  }
  //2PC and 4PC Correlation hists
  for(int ihar=0;ihar<NHAR2;ihar++){
    hCrn2_cent_fg[ihar]->Write();
    hCrn4_cent_fg[ihar]->Write();
    hCrn2_sub_cent_fg[ihar]->Write();
    hCrn4_sub_cent_fg[ihar]->Write();
    //hCrn2_cent_bg[ihar]->Write();
    //hCrn4_cent_bg[ihar]->Write();
    //hCrn2_sub_cent_bg[ihar]->Write();
    //hCrn4_sub_cent_bg[ihar]->Write();
    for(int icent=0;icent<NCENT;icent++){
      hCrn2_pt_fg[icent][ihar]->Write();
      hCrn4_pt_fg[icent][ihar]->Write();
      hCrn2_sub_pt_fg[icent][ihar]->Write();
      hCrn4_sub_pt_fg[icent][ihar]->Write();
      //hCrn2_pt_bg[icent][ihar]->Write();
      //hCrn4_pt_bg[icent][ihar]->Write();
      //hCrn2_sub_pt_bg[icent][ihar]->Write();
      //hCrn4_sub_pt_bg[icent][ihar]->Write();
    }
  }
 
  //Track histograms
  hNTrk->Write();
  hCent->Write();
  hPt->Write();
  hPhi->Write();
  hPhi_wei->Write();
  hEta->Write();
  hTrk_w->Write();
  hTrk_wei->Write();
  hTrk_eff->Write();
  //hEtaPhi->Write();
  //hEtaPhi_wei->Write();

  fOut_cum->Close();
  cout<<"Finished saving hists"<<endl;
}
